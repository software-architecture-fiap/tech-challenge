{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Documenta\u00e7\u00e3o do Tech Challenge"},{"location":"environment/","title":"Preparando Ambiente","text":"<p>Este projeto \u00e9 um sistema de pedidos de lanches adapt\u00e1vel para web e mobile, focado no backend. A aplica\u00e7\u00e3o \u00e9 desenvolvida utilizando FastAPI, SQLAlchemy, e Docker.</p>"},{"location":"environment/#pre-requisitos","title":"Pr\u00e9-Requisitos","text":"<p>Nota: Essa \u00e9 uma etapa indispens\u00e1vel para habilitar o ambiente de avalia\u00e7\u00e3o do tech challenge!</p> <ol> <li>Sistema Operacional: O projeto pode ser executado em qualquer sistema operacional que suporte Docker e Python. Recomenda-se um sistema baseado em Unix (Linux ou macOS) para facilitar o uso de Docker;</li> <li>Python: Vers\u00e3o 3.8 ou Superior;</li> <li>Docker: Para Containeriza\u00e7\u00e3o da Aplica\u00e7\u00e3o.</li> <li>Docker Compose: Para Orquestra\u00e7\u00e3o dos Cont\u00eaineres Docker.</li> </ol>"},{"location":"environment/#configuracao-do-ambiente","title":"Configura\u00e7\u00e3o do Ambiente","text":""},{"location":"environment/#instalacao-do-python","title":"Instala\u00e7\u00e3o do Python","text":"<p> Linux   macOS:</p> Bash<pre><code>sudo apt update\nsudo apt install python3 python3-pip\n</code></pre> <p> Windows:</p> <ul> <li>Baixe e instale o Python no Site Oficial.</li> </ul>"},{"location":"environment/#instalacao-do-docker","title":"Instala\u00e7\u00e3o do Docker","text":"<p>Siga as instru\u00e7\u00f5es no site oficial do Docker para instalar o Docker e Docker Compose:</p> <ul> <li>Docker</li> <li>Docker Compose</li> </ul>"},{"location":"environment/#clonando-o-repositorio","title":"Clonando o Reposit\u00f3rio","text":"<p>Clone este reposit\u00f3rio para sua m\u00e1quina local:</p> <p>Nota: Essa \u00e9 uma etapa indispens\u00e1vel para habilitar o ambiente de avalia\u00e7\u00e3o do tech challenge!</p> Bash<pre><code>git clone https://github.com/seu-usuario/tech-challenge.git\ncd tech-challenge\n</code></pre>"},{"location":"environment/#banco-de-dados","title":"Banco de Dados","text":"<p>Nota: Essa \u00e9 uma etapa indispens\u00e1vel para habilitar o ambiente de avalia\u00e7\u00e3o do tech challenge!</p> <ul> <li>Crie um arquivo <code>.env</code> na raiz do projeto e defina as seguintes vari\u00e1veis:</li> </ul> Bash<pre><code>DATABASE_URL=postgresql://postgres:localhost%401988@db:5432/challenge\nSECRET_KEY=mySecurePassword\nADMIN_NAME=Admin User\nADMIN_EMAIL=email@email.com.br\nADMIN_CPF=00000000000\nADMIN_PASSWORD=your_password\n</code></pre>"},{"location":"environment/#instalando-dependencias","title":"Instalando Depend\u00eancias","text":"<p>Nota: Essa \u00e9 uma etapa indispens\u00e1vel para habilitar o ambiente de avalia\u00e7\u00e3o do tech challenge!</p> <ul> <li>Crie e ative um ambiente virtual (opcional, mas recomendado):</li> </ul> Bash<pre><code>python3 -m venv venv\nsource venv/bin/activate  # Linux/macOS\n.\\venv\\Scripts\\activate   # Windows\n</code></pre> <ul> <li>Instale as Depend\u00eancias do Projeto:</li> </ul> Bash<pre><code>poetry install\n</code></pre> <ul> <li> <p>Execute as migra\u00e7\u00f5es do Alembic para criar o banco de dados e as tabelas necess\u00e1rias:</p> <p>Nota: Etapa opcional para habilitar o ambiente de avalia\u00e7\u00e3o do tech challenge</p> Bash<pre><code>alembic revision --autogenerate -m 'initial migration'\nalembic upgrade head\n</code></pre> </li> </ul>"},{"location":"environment/#executando-a-aplicacao","title":"Executando a Aplica\u00e7\u00e3o","text":"<p>Nota: Essa \u00e9 uma etapa indispens\u00e1vel para habilitar o ambiente de avalia\u00e7\u00e3o do tech challenge!</p> <p>Com Docker:</p> <p>Certifique-se de que o Docker e o Docker Compose est\u00e3o instalados. Navegue at\u00e9 a pasta do projeto e execute:</p> Bash<pre><code>docker-compose up --build\n</code></pre> <p>A aplica\u00e7\u00e3o estar\u00e1 dispon\u00edvel em <code>localhost:2000</code>.</p> <p>Sem Docker:</p> <p>Nota: Etapa opcional para habilitar o ambiente de avalia\u00e7\u00e3o do tech challenge</p> <p>Execute o servidor FastAPI:</p> Bash<pre><code>uvicorn app.main:app --host 0.0.0.0 --port 2000 --reload\n</code></pre> <p>A aplica\u00e7\u00e3o estar\u00e1 dispon\u00edvel em <code>localhost:2000</code>.</p>"},{"location":"environment/#documentacao-da-api","title":"Documenta\u00e7\u00e3o da API","text":"<p>A documenta\u00e7\u00e3o interativa da API est\u00e1 dispon\u00edvel em <code>localhost:2000/docs</code>.</p>"},{"location":"environment/#estrutura-de-arquivos","title":"Estrutura de Arquivos","text":"<ul> <li><code>app/main.py</code>: Ponto de entrada da aplica\u00e7\u00e3o.</li> <li><code>app/models.py</code>: Defini\u00e7\u00e3o dos modelos de dados.</li> <li><code>app/schemas.py</code>: Defini\u00e7\u00e3o dos esquemas Pydantic para valida\u00e7\u00e3o.</li> <li><code>app/crud.py</code>: Fun\u00e7\u00f5es CRUD para manipula\u00e7\u00e3o dos dados.</li> <li><code>app/database.py</code>: Configura\u00e7\u00e3o do banco de dados e sess\u00e3o.</li> <li><code>app/routers</code>: Roteadores FastAPI para diferentes endpoints (clientes, produtos, pedidos).</li> <li><code>app/middleware.py</code>: Middleware para limita\u00e7\u00e3o de taxa (Rate Limiting).</li> </ul>"},{"location":"environment/#limitacao-de-taxa","title":"Limita\u00e7\u00e3o de Taxa","text":"<p>Foi criado mas ainda n\u00e3o implementado um middleware para limitar as solicita\u00e7\u00f5es de um mesmo IP para o endpoint de token. Este middleware usa Redis para rastrear e limitar as solicita\u00e7\u00f5es:</p> <ul> <li>Limite de 10 solicita\u00e7\u00f5es por minuto por IP.</li> <li>Mensagem de erro personalizada quando o limite \u00e9 atingido.</li> </ul>"},{"location":"environment/#contribuicao","title":"Contribui\u00e7\u00e3o","text":"<p>Para contribuir com este projeto, siga os passos:</p> <ul> <li>Fork o reposit\u00f3rio;</li> <li>Crie uma nova branch (<code>git checkout -b feature/nova-funcionalidade</code>);</li> <li>Commit suas mudan\u00e7as (<code>git commit -am 'Adicionei uma nova funcionalidade'</code>);</li> <li>Push para a branch (<code>git push origin feature/nova-funcionalidade</code>);</li> <li>Abra um Pull Request;</li> </ul>"},{"location":"fase_1/ddd/","title":"Tech Challenge SOAT - Lanchonete de Bairro","text":"<p>O cliente \u00e9 qualquer pessoa que deseja fazer pedido na lanchonete, o atendente \u00e9 funcion\u00e1rio que auxilia no atendimento aos clientes, caso necess\u00e1rio. O autoatendimento \u00e9 o sistema que permitir\u00e1 ao cliente fazer o pedido sem a intera\u00e7\u00e3o direta com um atendente na lanchonetex. A prepara\u00e7\u00e3o ou cozinha \u00e9 a area onde os pedidos s\u00e3o preparados e atualizados (status do pedido).</p>"},{"location":"fase_1/ddd/#dominio-e-subdominios","title":"Dom\u00ednio e Subdom\u00ednios","text":"<p> O dom\u00ednio principal do tech challenge \u00e9 a Lanchonete, onde abrange as opera\u00e7\u00f5es e processos relacionados ao funcionamento da lanchonete, desde a sele\u00e7\u00e3o de produtos at\u00e9 o gerenciamento de pedidos e clientes. </p> <p>Os subdom\u00ednios s\u00e3o:</p> <ul> <li>Cliente: gest\u00e3o das informa\u00e7\u00f5es dos clientes.</li> <li>Pedido: cria, gerencia e acompanha os pedidos dos clientes.</li> <li>Produto: gest\u00e3o dos produtos oferecidos pela lanchonete.</li> </ul>"},{"location":"fase_1/ddd/#detalhamento-dos-contextos-e-agregados","title":"Detalhamento dos Contextos e Agregados","text":"<ul> <li>Cliente: Cont\u00e9m as informa\u00e7\u00f5es de identifica\u00e7\u00e3o dos clientes que optaram por fazer o cadastro na plataforma;</li> <li>Pedido: Cria e acompanha os pedidos. Cont\u00e9m os itens do pedido, ou seja, lanche, acompanhamento, bebida e sobremesa. \u00c9 o que o cliente deseja comprar.  <ul> <li>Produ\u00e7\u00e3o/Cozinha: Prepara e atualiza o status do pedido;</li> </ul> </li> <li>Pagamento: Respons\u00e1vel por processar o pagamento via QRCode que \u00e9 efetuado pelo cliente.</li> </ul>"},{"location":"fase_1/ddd/#processos","title":"Processos","text":"<ul> <li>Identifica\u00e7\u00e3o do Cliente: O cliente se identifica via CPF, o cadastro \u00e9 feito com nome e e-mail; Pode optar por n\u00e3o se identificar;</li> <li>Montar Pedido: Cliente seleciona os itens: lanche, acompanhamento, bebida e sobremesa. Todos os itens s\u00e3o opcionais.</li> <li>Confirma\u00e7\u00e3o do Pedido: O cliente finaliza a montagem do pedido e efetua pagamento.</li> <li>Processo de Pagamento: O cliente paga via QRCode do Mercado Pago.</li> <li>Pedido Enviado para Produ\u00e7\u00e3o: Ap\u00f3s confirma\u00e7\u00e3o do pagamento o sistema envia o pedido para prepara\u00e7\u00e3o, ou seja, cozinha da lanchonetex.</li> <li>Prepara\u00e7\u00e3o do Pedido: a cozinha recebe o pedido (status recebido); a cozinha inicia a prepara\u00e7\u00e3o do pedido (status em prepara\u00e7\u00e3o); cozinha finaliza a produ\u00e7\u00e3o do pedido (pedido ponto para retirada); cliente \u00e9 notificado que o pedido est\u00e1 pronto para retirada; </li> <li>Status do Pedido: Fases pelas quais um pedido passa: Recebido, Em Prepara\u00e7\u00e3o, Pronto para Retirada e Finalizado.</li> <li>Retirada do Pedido: o cliente retira o pedido; o sistema atualiza o status do pedido para finalizado;</li> </ul>"},{"location":"fase_1/ddd/#narrativa-dos-processos","title":"Narrativa dos Processos","text":""},{"location":"fase_1/ddd/#natural","title":"Natural","text":"<p>O processo de pedido de lanches come\u00e7a quando um cliente deseja fazer um pedido, o cliente vai at\u00e9 o atendente da lanchonete e solicita o card\u00e1pio da unidade. O atendente anota os itens do pedido do cliente, com a alta demanda por conta do sucesso da lanchonete o volume de atendimento pode ser ca\u00f3tico e confuso, por isso, podem ocorrer erros quando um cliente solicita personaliza\u00e7\u00e3o do lanche, podendo causar ru\u00eddo entre solicita\u00e7\u00e3o do pedido e execu\u00e7\u00e3o no preparo do mesmo.</p>"},{"location":"fase_1/ddd/#digitalizado","title":"Digitalizado","text":"<p>O cliente que deseja fazer um pedido na lanchonete dirige-se a tela de autoatendimento e escolhe se far\u00e1 cadastro indicando nome, CPF e e-mail. O cliente tem op\u00e7\u00e3o de n\u00e3o fazer cadastro na plataforma e seguir para interface do pedido. </p> <p>Na interface de pedido \u00e9 exibido os itens de pedido que s\u00e3o: lanche, acompanhamento, bebida e sobremesa. Al\u00e9m disso, cada item ter\u00e1 sua descri\u00e7\u00e3o e o pre\u00e7o. Todos os itens s\u00e3o opcionais mas o pedido s\u00f3 poder\u00e1 ser confirmado se houver ao menos um item selecionado, caso n\u00e3o tenha nenhum item selecionado dever\u00e1 ser exibida uma mensagem informativa: \u201cPor favor, selecione um item para prosseguir com seu pedido\u201d.</p> <p>Ap\u00f3s o cliente finalizar a sele\u00e7\u00e3o de itens \u00e9 mostrado o resumo ou lista dos itens selecionados, o cliente dever\u00e1 confirmar para seguir com o pagamento. \u00c9 feito o redirecionamento do pagamento que exibe o meio de pagamento por QR code do Mercado Pago. O cliente deve seguir com o fluxo do checkout externo. </p> <p>Ap\u00f3s confirma\u00e7\u00e3o do pagamento o c\u00f3digo do pedido \u00e9 gerado, o pedido ser\u00e1 encaminhado para cozinha. A cozinha recebe o pedido. O pedido ir\u00e1 para status em prepara\u00e7\u00e3o assim que a cozinha retirar o pedido da impressora e adicionar no quadro de prepara\u00e7\u00e3o. A equipe da cozinha/prepara\u00e7\u00e3o sinalizar\u00e1 quando o pedido estiver pronto. </p> <p>O cliente poder\u00e1 visualizar o status do pedido nos monitores da lanchonete ou pelo celular conectado na rede sem fio da lanchonete usando o endere\u00e7o lanchonetex.pedido.local/acompanhar_pedido indicando o c\u00f3digo do pedido. </p> <p>Quando o pedido estiver com status de pronto o sistema notificar\u00e1 o cliente com a mensagem: \u201cSeu pedido est\u00e1 pronto para retirada, por favor dirija-se ao balc\u00e3o de retirada\u201d. O atendente confirmar\u00e1 a retirada e finaliza o processo do pedido. O sistema enviar\u00e1 uma pesquisa de satisfa\u00e7\u00e3o para o cliente.</p> <p>O sistema dever\u00e1 exibir na \u00e1rea administrativa (interface de atendimento) todos os pedidos em prepara\u00e7\u00e3o ou andamento e o tempo de espera.</p>"},{"location":"fase_1/ddd/#documentacao-pictografica","title":"Documenta\u00e7\u00e3o Pictogr\u00e1fica","text":"<p>Cadastro, Pedido e Pagamento</p> <p></p>"},{"location":"fase_1/entrega/","title":"Testando Aplica\u00e7\u00e3o no Swagger","text":"<p>Essa p\u00e1gina ir\u00e1 mostrar para os nossos orientadores, o processo completo de fazer os testes no nosso backend. Seguiremos as etapas definidas no desafio.</p>"},{"location":"fase_1/entrega/#entregaveis","title":"Entreg\u00e1veis","text":""},{"location":"fase_1/entrega/#entregavel-1","title":"Entreg\u00e1vel 1","text":"<ol> <li> <p> Documenta\u00e7\u00e3o do sistema (DDD) com Event Storming, incluindo todos os passos/tipos de diagrama mostrados na aula 6 do m\u00f3dulo de DDD, e utilizando a linguagem ub\u00edqua, dos seguintes fluxos:</p> <ol> <li> Realiza\u00e7\u00e3o do Pedido e Pagamento</li> <li> Prepara\u00e7\u00e3o e Entrega do Pedido</li> </ol> </li> </ol> <p>\u00c9 importante que os desenhos sigam os padr\u00f5es utilizados na explica\u00e7\u00e3o.</p>  Links das Entregas <ul> <li>Clique nesse Link para visitar a p\u00e1gina com a   Documenta\u00e7\u00e3o do DDD.</li> <li>Clique nesse Link para visitar a   p\u00e1gina com o Event Storming feito com Figma.</li> </ul>"},{"location":"fase_1/entrega/#entregavel-2","title":"Entreg\u00e1vel 2","text":"<ol> <li> <p>Uma Aplica\u00e7\u00e3o para todo o sistema de backend (monolito) que dever\u00e1 ser desenvolvido seguindo os padr\u00f5es apresentados nas aulas:</p> <ul> <li> Utilizando Arquitetura Hexagonal</li> <li> API\u2019s<ul> <li> Cadastro do Cliente: Pode ser feito com ou sem cpf;</li> <li> Com cpf: Pode ser feito pela Rota Create Customer</li> <li> Sem cpf: Pode ser feito pela Rota Create Anonymous Customer</li> <li> Identifica\u00e7\u00e3o do Cliente via CPF: Se cadastrado com Create Customer</li> <li> Criar, Editar e Remover Produtos: Necess\u00e1rio estar logado com Username (e-mail) e Token cadastrado com Admin;</li> <li> Buscar Produtos por Categoria</li> <li> Fake Checkout: apenas enviar os produtos escolhidos para a fila. O checkout \u00e9 a finaliza\u00e7\u00e3o do pedido.</li> <li> Listar os Pedidos</li> </ul> </li> <li> Banco de Dados \u00e0 sua Escolha: Escolhemos o Postgres.<ul> <li>Inicialmente, deveremos trabalhar e organizar a fila dos pedidos apenas em um banco de dados.</li> </ul> </li> </ul> </li> </ol>"},{"location":"fase_1/entrega/#entregavel-3","title":"Entreg\u00e1vel 3","text":"<ol> <li> <p> A aplica\u00e7\u00e3o deve ser entregue com um Dockerfile configurado para execut\u00e1-la corretamente, e um docker-compose.yaml para subir o ambiente completo.</p> <ul> <li> Disponibilizar tamb\u00e9m o Swagger para consumo dessas APIs.</li> </ul> </li> </ol> <p>Para valida\u00e7\u00e3o da POC, temos a seguinte limita\u00e7\u00e3o de infraestrutura:</p> <ul> <li> 1 inst\u00e2ncia para banco de dados</li> <li> 1 inst\u00e2ncia para executar a aplica\u00e7\u00e3o</li> </ul> <p>N\u00e3o ser\u00e1 necess\u00e1rio o desenvolvimento de interfaces para o frontend, o foco deve ser total no backend.</p>"},{"location":"fase_1/event_storming/","title":"Event Storming","text":""},{"location":"fase_1/event_storming/#event-storming","title":"Event Storming","text":"<p>Esse \u00e9 o board do Figma que usamos para o Event Storming.</p>"},{"location":"fase_1/steps/","title":"Passo a Passo para Testar o Backend","text":""},{"location":"fase_1/steps/#passos","title":"Passos","text":"<p>Essa documenta\u00e7\u00e3o fornece um passo a passo detalhado para realizar testes no backend do nosso projeto. Clique nas caixas abaixo para avan\u00e7ar em cada etapa do processo.</p>"},{"location":"fase_1/steps/#autenticacao-e-autorizacao","title":"Autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o","text":"Gerar Token de Acesso e Autorizar <p>O primeiro passo \u00e9 criar um Token de Acesso usando um dos usu\u00e1rios administrativos. Para isso, utilize o Swagger em  Login for Access Token. Siga as etapas abaixo:</p> <ul> <li>Clique em Try it out.</li> <li>Preencha os seguintes campos: <ul> <li>username: \"email@email.com.br\"</li> <li>password: \"your_password\"</li> <li>client_id: \"1\"</li> </ul> </li> </ul> <p>Isso gerar\u00e1 o Token de Acesso necess\u00e1rio para prosseguir com as etapas que exigem autentica\u00e7\u00e3o via token. </p> <p>Ao tentar acessar endpoints que requerem autoriza\u00e7\u00e3o, como category, orders, e products, siga estas etapas adicionais:</p> <ul> <li>Clique em Authorize (s\u00edmbolo de cadeado).</li> <li>Fa\u00e7a login usando seu e-mail e senha administrativo.<ul> <li>username: \"email@email.com.br\"</li> <li>password: \"your_password\"</li> <li>client_id: 1</li> </ul> </li> </ul> Solu\u00e7\u00e3o de Problemas: 401 Unhauthorized <p>Se ao tentar acessar os endpoints category, orders, ou products voc\u00ea receber uma resposta com o erro 401 Unauthorized, isso significa que as credenciais n\u00e3o foram validadas corretamente.</p> <p>JSON<pre><code>Error: Unauthorized\n\nResponse body\nDownload\n{\n    \"detail\": \"Could not validate credentials\"\n}\n</code></pre> Verifique se o Token de Acesso foi gerado corretamente e se as credenciais est\u00e3o corretas ao tentar autorizar o acesso. </p> <p> </p> <p>Para garantir a seguran\u00e7a, o token expira a cada opera\u00e7\u00e3o (GET, PUT ou POST). Para ajustar o tempo de expira\u00e7\u00e3o do token, voc\u00ea deve definir a vari\u00e1vel de ambiente TIMETOKEN no arquivo .env com o valor desejado para o tempo de expira\u00e7\u00e3o personalizado.</p>"},{"location":"fase_1/steps/#onboarding-cliente-anonimo","title":"Onboarding: Cliente an\u00f4nimo","text":"Passo 01: Realizando pedido sem identifica\u00e7\u00e3o <p>Este projeto permite que o cliente fa\u00e7a um pedido sem a necessidade de cadastro de seus dados pessoais. Para executar esse fluxo, siga os passos abaixo: 1. Acesse o Swagger em Create Anonymous Customer. 2. Clique em Try it out. 3. Em seguida, clique em Execute. Ap\u00f3s seguir esses passos, um cliente an\u00f4nimo ser\u00e1 gerado, permitindo que o pedido seja realizado sem identifica\u00e7\u00e3o. </p>"},{"location":"fase_1/steps/#onboarding-cliente-identificado","title":"Onboarding: Cliente identificado","text":"Passo 02: Fazendo cadastro do cliente <p>Para os clientes que desejam se cadastrar na aplica\u00e7\u00e3o, basta usar o endpoint customers/register e preencher com os dados solicitados como no exemplo abaixo:</p> JSON<pre><code>{\n    \"name\": \"Abelardo\",\n    \"email\": \"abe@email.com.br\",\n    \"cpf\": \"001001001-11\",\n    \"password\": \"my_password\"\n}\n</code></pre> <p>Para certificar que o cliente foi registrado utilize o endpoint customers/read_customers e liste todos os clientes cadastrados.  </p>"},{"location":"fase_1/steps/#pedido-selecao-do-pedido","title":"Pedido: Sele\u00e7\u00e3o do pedido","text":"Passo 03: Efetuando um pedido <p>Com o endpoint orders/create_orders preencha com os valores de customer_id que foi cadastrado nos passos 01 ou 02 e product_id para adicionar o produto a um pedido, exemplo:</p> <p>JSON<pre><code>{\n    \"status\": \"string\",\n    \"user_agent\": \"string\",\n    \"ip_address\": \"string\",\n    \"os\": \"string\",\n    \"browser\": \"string\",\n    \"device\": \"string\",\n    \"comments\": \"string\",\n    \"customer_id\": 4,\n    \"products\": [\n        {\n        \"product_id\": 10,\n        \"comment\": \"sem gelo\"\n        }\n    ]\n}\n</code></pre> Resultado da opera\u00e7\u00e3o de sele\u00e7\u00e3o do pedido: </p>"},{"location":"fase_1/steps/#pagamento-processando-o-pagamento-do-pedido","title":"Pagamento: Processando o pagamento do pedido","text":"Passo 04: Realizando pagamento do pedido (fake checkout) <p>Ap\u00f3s executar o orders/fake_checkout siga para o fluxo de atualiza\u00e7\u00e3o de status do pedido.</p>"},{"location":"fase_1/steps/#preparacao-e-atualizacao-do-pedido","title":"Prepara\u00e7\u00e3o e atualiza\u00e7\u00e3o do pedido","text":"Passo 05: Atualiza\u00e7\u00e3o de status de pedido <p>Com order_id \u00e9 poss\u00edvel fazer a atualiza\u00e7\u00e3o de status de cada pedido, com o endpoint orders/update_order_status. Exemplo com valor de entrada usando o order_id 3:</p> JSON<pre><code>{\n    \"status\": \"em prepara\u00e7\u00e3o\"\n}\n</code></pre> Passo 06: Visualizando status do pedido <p>Para visualizar o status atual de um pedido, siga os passos abaixo: - Com o valor do order_id, acesse o endpoint orders/read_order. - Verifique o status atual do pedido. Exemplo de retorno:</p> <p>JSON<pre><code>{\n    \"id\": 3,\n    \"customer_id\": 4,\n    \"status\": \"em prepara\u00e7\u00e3o\"\n}\n</code></pre> - Para atualizar o status do pedido para pronto, utilize o endpoint oorders/update_order_status com o seguinte corpo de requisi\u00e7\u00e3o:</p> <p>JSON<pre><code>{\n    \"status\": \"pronto\"\n}\n</code></pre> - Depois de atualizar o status, voc\u00ea pode confirmar a atualiza\u00e7\u00e3o acessando novamente o endpoint orders/read_order. O estado do pedido ser\u00e1 exibido como pronto para retirada. </p> Listando todos os pedidos registrados <p>Em orders/read_orders \u00e9 poss\u00edvel listar todos os pedidos feitos por cliente. Exemplo com valores de retorno:</p> JSON<pre><code>{\n    \"orders\": [\n        {\n        \"id\": 1,\n        \"customer_id\": 1\n        },\n        {\n        \"id\": 2,\n        \"customer_id\": 4\n        },\n        {\n        \"id\": 3,\n        \"customer_id\": 4\n        },\n        {\n        \"id\": 4,\n        \"customer_id\": 4\n        }\n    ]\n}    \n</code></pre>"},{"location":"fase_1/steps/#gerenciamento-de-produtos-e-categorias","title":"Gerenciamento de produtos e categorias","text":"Cadastro de produto <p>Usando o endpoint products/create_product \u00e9 poss\u00edvel fazer o cadastro de um novo produto de acordo com as categorias previamente cadastradas. Exemplo com valores de entrada:</p> JSON<pre><code>{\n    \"name\": \"Brigadeiro\",\n    \"description\": \"Doce feito com leite condensado e achocolatado\",\n    \"price\": 3,\n    \"category_id\": 5,\n    \"category\": \"Sobremesas\"\n}\n</code></pre> Atualiza\u00e7\u00e3o de categoria <p>Para atualizar uma categoria de produto, utilize o endpoint category/update_category: - Com o valor do category_id, fa\u00e7a a requisi\u00e7\u00e3o com o corpo de requisi\u00e7\u00e3o similar ao exemplo abaixo:</p> JSON<pre><code>{\n\"name\": \"Sobremesas\",\n\"description\": \"Categoria dedicada a todos os tipos de sobremesas.\"\n}    \n</code></pre> Listando categorias e produtos <p>Usando o endpoint category/list_categories \u00e9 poss\u00edvel fazer o cadastro de um novo produto de acordo com as categorias previamente cadastradas. Exemplo com valores que retornam nessa opera\u00e7\u00e3o:</p> JSON<pre><code>{\n\"categories\": [\n    {\n    \"name\": \"Sandu\u00edches\",\n    \"id\": 1,\n    \"products\": [\n        {\n        \"name\": \"Sandu\u00edche de Frango Grelhado\",\n        \"description\": \"Grilled chicken sandwich with lettuce and tomato\",\n        \"price\": 15,\n        \"category_id\": 1,\n        \"category\": \"Sandu\u00edches\",\n        \"id\": 1\n        },\n        {\n        \"name\": \"Cheeseburger Cl\u00e1ssico\",\n        \"description\": \"Classic cheeseburger with beef patty and cheese\",\n        \"price\": 12,\n        \"category_id\": 1,\n        \"category\": \"Sandu\u00edches\",\n        \"id\": 2\n        },\n        {\n        \"name\": \"Sandu\u00edche Vegano de Gr\u00e3o-de-Bico\",\n        \"description\": \"Vegan sandwich with chickpea patty\",\n        \"price\": 14,\n        \"category_id\": 1,\n        \"category\": \"Sandu\u00edches\",\n        \"id\": 3\n        }\n    ]\n    },\n    {\n    \"name\": \"Pizzas\",\n    \"id\": 2,\n    \"products\": [\n        {\n        \"name\": \"Pizza Margherita\",\n        \"description\": \"Pizza with tomato sauce, mozzarella, and basil\",\n        \"price\": 25,\n        \"category_id\": 2,\n        \"category\": \"Pizzas\",\n        \"id\": 4\n        },\n        {\n        \"name\": \"Pizza Pepperoni\",\n        \"description\": \"Pizza with tomato sauce, mozzarella, and pepperoni\",\n        \"price\": 27,\n        \"category_id\": 2,\n        \"category\": \"Pizzas\",\n        \"id\": 5\n        },\n        {\n        \"name\": \"Pizza Quatro Queijos\",\n        \"description\": \"Pizza with four types of cheese\",\n        \"price\": 28,\n        \"category_id\": 2,\n        \"category\": \"Pizzas\",\n        \"id\": 6\n        }\n    ]\n    },\n    {\n    \"name\": \"Acompanhamentos\",\n    \"id\": 3,\n    \"products\": [\n        {\n        \"name\": \"Batata Frita\",\n        \"description\": \"Portion of crispy french fries\",\n        \"price\": 8,\n        \"category_id\": 3,\n        \"category\": \"Acompanhamentos\",\n        \"id\": 7\n        },\n        {\n        \"name\": \"An\u00e9is de Cebola\",\n        \"description\": \"Portion of breaded onion rings\",\n        \"price\": 9,\n        \"category_id\": 3,\n        \"category\": \"Acompanhamentos\",\n        \"id\": 8\n        },\n        {\n        \"name\": \"Salada Caesar\",\n        \"description\": \"Caesar salad with lettuce, croutons, and parmesan cheese\",\n        \"price\": 10,\n        \"category_id\": 3,\n        \"category\": \"Acompanhamentos\",\n        \"id\": 9\n        }\n    ]\n    },\n    {\n    \"name\": \"Bebidas\",\n    \"id\": 4,\n    \"products\": [\n        {\n        \"name\": \"Coca-Cola\",\n        \"description\": \"Cola soft drink\",\n        \"price\": 5,\n        \"category_id\": 4,\n        \"category\": \"Bebidas\",\n        \"id\": 10\n        },\n        {\n        \"name\": \"Suco de Laranja\",\n        \"description\": \"Natural orange juice\",\n        \"price\": 6,\n        \"category_id\": 4,\n        \"category\": \"Bebidas\",\n        \"id\": 11\n        },\n        {\n        \"name\": \"\u00c1gua Mineral\",\n        \"description\": \"Still mineral water\",\n        \"price\": 4,\n        \"category_id\": 4,\n        \"category\": \"Bebidas\",\n        \"id\": 12\n        }\n    ]\n    },\n    {\n    \"name\": \"Sobremesas\",\n    \"id\": 5,\n    \"products\": [\n        {\n        \"name\": \"Brownie de Chocolate\",\n        \"description\": \"Chocolate brownie with walnuts\",\n        \"price\": 7,\n        \"category_id\": 5,\n        \"category\": \"Sobremesas\",\n        \"id\": 13\n        },\n        {\n        \"name\": \"Torta de Ma\u00e7\u00e3\",\n        \"description\": \"Apple pie with cinnamon\",\n        \"price\": 8,\n        \"category_id\": 5,\n        \"category\": \"Sobremesas\",\n        \"id\": 14\n        },\n        {\n        \"name\": \"Sorvete de Baunilha\",\n        \"description\": \"Vanilla ice cream\",\n        \"price\": 6,\n        \"category_id\": 5,\n        \"category\": \"Sobremesas\",\n        \"id\": 15\n        },\n        {\n        \"name\": \"Brigadeiro\",\n        \"description\": \"Doce feito com leite condensado e achocolatado\",\n        \"price\": 3,\n        \"category_id\": 5,\n        \"category\": \"Sobremesas\",\n        \"id\": 16\n        },\n        {\n        \"name\": \"Brigadeiro\",\n        \"description\": \"Doce feito com leite condensado e achocolatado\",\n        \"price\": 3,\n        \"category_id\": 5,\n        \"category\": \"Sobremesas\",\n        \"id\": 17\n        },\n        {\n        \"name\": \"Brigadeiro\",\n        \"description\": \"Doce feito com leite condensado e achocolatado\",\n        \"price\": 3,\n        \"category_id\": 5,\n        \"category\": \"Sobremesas\",\n        \"id\": 18\n        },\n        {\n        \"name\": \"Brigadeiro\",\n        \"description\": \"Doce feito com leite condensado e achocolatado\",\n        \"price\": 3,\n        \"category_id\": 5,\n        \"category\": \"Sobremesas\",\n        \"id\": 19\n        }\n    ]\n    }\n]\n}\n</code></pre>"},{"location":"fase_2/clean_code/","title":"Clean Code","text":""},{"location":"fase_2/clean_code/#manutencao-de-codigo-limpo","title":"Manuten\u00e7\u00e3o de C\u00f3digo Limpo","text":"<p>Para assegurar que nosso c\u00f3digo permane\u00e7a limpo, leg\u00edvel e f\u00e1cil de manter, implementamos diversas automatiza\u00e7\u00f5es e ferramentas de linting. Essas medidas minimizam o esfor\u00e7o necess\u00e1rio para manter a estrutura do projeto organizada. A seguir, detalhamos as a\u00e7\u00f5es que tomamos para alcan\u00e7ar esse objetivo.</p>"},{"location":"fase_2/clean_code/#ferramentas-de-linting-e-formatacao","title":"Ferramentas de Linting e Formata\u00e7\u00e3o","text":""},{"location":"fase_2/clean_code/#ruff","title":"Ruff","text":"<p>O <code>Ruff</code> \u00e9 uma ferramenta de linting e formata\u00e7\u00e3o para Python que integra diversas funcionalidades de an\u00e1lise est\u00e1tica de c\u00f3digo em um \u00fanico pacote. Ele verifica o c\u00f3digo em busca de padr\u00f5es que possam ser otimizados, erros comuns, viola\u00e7\u00f5es de estilo (como o PEP 8) e realiza sugest\u00f5es de melhorias. Al\u00e9m disso, o Ruff formata o c\u00f3digo automaticamente, ajustando espa\u00e7amento, indenta\u00e7\u00e3o e garantindo consist\u00eancia no estilo de acordo com as regras configuradas. Por ser altamente eficiente e r\u00e1pido, ele \u00e9 indicado para grandes projetos que requerem verifica\u00e7\u00e3o e corre\u00e7\u00e3o de estilo de forma \u00e1gil.</p>"},{"location":"fase_2/clean_code/#sonar-lint","title":"Sonar Lint","text":"<p>Al\u00e9m das configura\u00e7\u00f5es e bibliotecas automatizadas, utilizamos o plugin SonarLint para realizar verifica\u00e7\u00f5es e fornecer sugest\u00f5es em nosso c\u00f3digo. Isso nos ajuda a refletir sobre nosso projeto durante o desenvolvimento, garantindo a qualidade e a conformidade com as melhores pr\u00e1ticas.</p>"},{"location":"fase_2/clean_code/#sourcery","title":"Sourcery","text":"<p>Assim como o SonarLint, o Sourcery verifica nosso c\u00f3digo em n\u00edvel de reposit\u00f3rio. Ele funciona como uma an\u00e1lise profunda do projeto, identificando \u00e1reas que podem ser otimizadas e sugerindo melhorias para aumentar a efici\u00eancia e a qualidade do c\u00f3digo.</p>"},{"location":"fase_2/clean_code/#automacao-de-verificacoes","title":"Automa\u00e7\u00e3o de Verifica\u00e7\u00f5es","text":""},{"location":"fase_2/clean_code/#pre-commit","title":"Pre-Commit","text":"<p><code>Pre-Commit</code> \u00e9 uma ferramenta que automatiza a execu\u00e7\u00e3o de verifica\u00e7\u00f5es de qualidade no c\u00f3digo antes de cada commit. Ela permite configurar uma s\u00e9rie de hooks (verifica\u00e7\u00f5es) que s\u00e3o executados automaticamente, como linters, formata\u00e7\u00e3o de c\u00f3digo, verifica\u00e7\u00e3o de erros ou testes de seguran\u00e7a. Esses hooks no nosso projeto incluem o Ruff. Isso ajuda a garantir que o c\u00f3digo siga as melhores pr\u00e1ticas, mantendo a consist\u00eancia e evitando que erros cheguem ao reposit\u00f3rio. Sempre que fazemos um commit, o Pre-Commit impede que prossigamos se algo estiver fora do padr\u00e3o.</p>"},{"location":"fase_2/clean_code/#github-actions","title":"Github Actions","text":"<p>Adicionamos valida\u00e7\u00f5es p\u00f3s-commit com o GitHub Actions para garantir a qualidade do c\u00f3digo durante o push. Isso proporcionar\u00e1 uma camada adicional de seguran\u00e7a em rela\u00e7\u00e3o \u00e0 qualidade do c\u00f3digo. Caso seja desabilitado o <code>Pre-commit</code> em sua IDE, o workflow do GitHub Actions identificar\u00e1 o problema com nossas a\u00e7\u00f5es configuradas.</p>"},{"location":"fase_2/clean_code/#testes-e-cobertura","title":"Testes e Cobertura","text":""},{"location":"fase_2/clean_code/#testes-unitarios","title":"Testes Unit\u00e1rios","text":"<p>Implementamos uma estrutura para que os testes unit\u00e1rios sejam executados ap\u00f3s cada commit. Al\u00e9m disso, utilizamos o conceito de testes locais para facilitar o desenvolvimento, permitindo que os desenvolvedores verifiquem a funcionalidade do c\u00f3digo antes de envi\u00e1-lo para o reposit\u00f3rio.</p>"},{"location":"fase_2/clean_code/#pytest-coverage","title":"Pytest Coverage","text":"<p>Pytest Coverage \u00e9 uma extens\u00e3o do framework de testes <code>pytest</code> que mede a cobertura de testes no c\u00f3digo Python. Ele gera relat\u00f3rios detalhados sobre quais partes do c\u00f3digo foram executadas durante a execu\u00e7\u00e3o dos testes e quais n\u00e3o foram, ajudando a identificar \u00e1reas n\u00e3o testadas. A cobertura \u00e9 essencial para garantir que os testes validem o m\u00e1ximo poss\u00edvel do comportamento do c\u00f3digo, aumentando sua confiabilidade.</p>"},{"location":"fase_2/clean_code/#documentacao","title":"Documenta\u00e7\u00e3o","text":""},{"location":"fase_2/clean_code/#docstrings","title":"Docstrings","text":"<p>Docstrings s\u00e3o strings de documenta\u00e7\u00e3o usadas para descrever o prop\u00f3sito, funcionamento e detalhes de uma fun\u00e7\u00e3o, classe, m\u00e9todo ou m\u00f3dulo em Python. Elas s\u00e3o colocadas logo abaixo da defini\u00e7\u00e3o do elemento e seguem o padr\u00e3o de boas pr\u00e1ticas recomendado pela PEP 257. Docstrings facilitam a compreens\u00e3o do c\u00f3digo, ajudam a gerar documenta\u00e7\u00e3o automaticamente e s\u00e3o acess\u00edveis via <code>help()</code>. O formato pode variar (Google, NumPy, Sphinx), mas deve incluir a descri\u00e7\u00e3o geral, par\u00e2metros, valor de retorno e exce\u00e7\u00f5es, quando aplic\u00e1vel. Exemplo no formato Google:</p> <p>Python<pre><code>def soma(a: int, b: int) -&gt; int:\n    \"\"\"\n    Soma dois n\u00fameros inteiros.\n\n    Args:\n        a (int): O primeiro n\u00famero.\n        b (int): O segundo n\u00famero.\n\n    Returns:\n        int: A soma dos dois n\u00fameros.\n    \"\"\"\n    return a + b\n</code></pre> Essas docstrings descrevem claramente a fun\u00e7\u00e3o e seus componentes, facilitando a compreens\u00e3o e manuten\u00e7\u00e3o do c\u00f3digo.</p>"},{"location":"fase_2/clean_code/#interrogate","title":"Interrogate","text":"<p>Interrogate \u00e9 uma ferramenta de an\u00e1lise est\u00e1tica para Python que verifica se o c\u00f3digo est\u00e1 adequadamente documentado com docstrings. Ele percorre o c\u00f3digo-fonte e gera relat\u00f3rios indicando quais fun\u00e7\u00f5es, classes e m\u00e9todos est\u00e3o sem docstrings, auxiliando na conformidade com padr\u00f5es de documenta\u00e7\u00e3o, como o PEP 257. O Interrogate tamb\u00e9m permite configurar a cobertura m\u00ednima de docstrings que um projeto deve ter e pode ser integrado com ferramentas como Pre-Commit para garantir que todo o novo c\u00f3digo atenda aos requisitos de documenta\u00e7\u00e3o.</p>"},{"location":"fase_2/clean_code/#gerenciamento-de-dependencias-e-tarefas","title":"Gerenciamento de Depend\u00eancias e Tarefas","text":""},{"location":"fase_2/clean_code/#poetry","title":"Poetry","text":"<p>Agora, temos total controle sobre o escopo do projeto ao adicionar um gerenciador de depend\u00eancias mais robusto do que um simples arquivo <code>requirements.txt</code>. Isso nos proporciona seguran\u00e7a quanto \u00e0 compatibilidade entre as depend\u00eancias e reduz o risco de conflitos de vers\u00e3o.</p>"},{"location":"fase_2/clean_code/#taskipy","title":"Taskipy","text":"<p>O <code>Taskipy</code> facilita a cria\u00e7\u00e3o e o uso de atalhos para a linha de comando, similar a um Makefile ou aliases. Com ele, podemos definir diversos comandos no arquivo <code>pyproject.toml</code>, simplificando a execu\u00e7\u00e3o de tarefas comuns. Por exemplo, em vez de lembrar uma s\u00e9rie de comandos complexos, podemos simplesmente executar <code>task test</code> para rodar os testes.</p>"},{"location":"fase_2/clean_code/#tipagem","title":"Tipagem","text":""},{"location":"fase_2/clean_code/#type-hints","title":"Type Hints","text":"<p>Type Hints em Python s\u00e3o anota\u00e7\u00f5es opcionais usadas para indicar os tipos de vari\u00e1veis, par\u00e2metros e valores de retorno em fun\u00e7\u00f5es. Elas melhoram a legibilidade do c\u00f3digo, facilitam a manuten\u00e7\u00e3o e permitem a detec\u00e7\u00e3o antecipada de erros por ferramentas de an\u00e1lise est\u00e1tica, como linters e IDEs. Embora n\u00e3o alterem o comportamento do c\u00f3digo em tempo de execu\u00e7\u00e3o, os Type Hints ajudam os desenvolvedores a entender melhor as expectativas de tipos, tornando o c\u00f3digo mais robusto e confi\u00e1vel. Exemplo:</p> Python<pre><code>def soma(a: int, b: int) -&gt; int:\n    return a + b\n</code></pre> <p>Neste exemplo, a fun\u00e7\u00e3o <code>soma</code> espera dois par\u00e2metros do tipo inteiro e retorna um valor inteiro.</p>"},{"location":"fase_2/kubernetes/","title":"Kubernetes","text":""},{"location":"fase_2/kubernetes/#video-no-youtube","title":"V\u00eddeo no Youtube","text":""},{"location":"fase_2/kubernetes/#arquitetura","title":"Arquitetura","text":"<pre><code>flowchart TD\n    subgraph Control_Plane[\"Control Plane\"]\n        A[etcd]\n        B[CoreDNS]\n        C[Kindnet]\n        D[Kube-Proxy]\n        E[Kube-Apiserver]\n        F[Kube-Controller-Manager]\n        G[Kube-Scheduler]\n\n        A --&gt; E\n        B --&gt; E\n        C --&gt; E\n        D --&gt; E\n        E --&gt; F\n        E --&gt; G\n    end\n\n    subgraph Worker_Node[\"lanchonete-k8s-worker\"]\n        H[Pod: Postgres_DB]\n        I[Pod: Web_APP]\n\n        H --&gt; J[Service: db]\n        I --&gt; K[Service: web]\n        H --&gt; L[PersistentVolumeClaim: db-pvc]\n        I --&gt; M[PersistentVolumeClaim: logs-pvc]\n\n        K --&gt; H\n        J --&gt; I\n    end\n\n    subgraph Autoscaler[\"Horizontal Pod Autoscaler (HPA)\"]\n        N[HPA: Web_APP Autoscaler]\n        N --&gt; I\n    end\n\n    Client[Client Access] --&gt; K\n</code></pre>"},{"location":"fase_2/kubernetes/#pre-requisitos","title":"Pr\u00e9-requisitos","text":"<ul> <li>Kind</li> <li>Kubectl</li> <li>Docker</li> <li>Kustomize</li> </ul> <p>Nessa primeira vers\u00e3o nossa aplica\u00e7\u00e3o ficar\u00e1 dispon\u00edvel em cluster Kubernetes local usando o Kind. Por favor, certifique-se de que as ferramentas de pr\u00e9-requisitos est\u00e3o instaladas, como nos exemplos:</p> Bash<pre><code>\u276f kind version\nkind v0.24.0 go1.22.6 linux/amd64\n</code></pre> Bash<pre><code>\u276f kubectl version\nClient Version: v1.29.2\nKustomize Version: v5.0.4-0.20230601165947-6ce0bf390ce3\nServer Version: v1.31.0\n</code></pre>"},{"location":"fase_2/kubernetes/#configurando-os-clusters-usando-o-kind","title":"Configurando os clusters usando o Kind","text":"<ul> <li>Execute o script dentro de <code>./infra/scripts/setup.sh</code></li> <li>Aguarde alguns minutos at\u00e9 os cluster serem criados, como no exemplo abaixo:</li> </ul> Bash<pre><code>\u276f ./infra/scripts/setup.sh\nCreating cluster \"lanchonete-k8s\" ...\n \u2713 Ensuring node image (kindest/node:v1.31.0) \ud83d\uddbc\n \u2713 Preparing nodes \ud83d\udce6 \ud83d\udce6\n \u2713 Writing configuration \ud83d\udcdc\n \u2713 Starting control-plane \ud83d\udd79\ufe0f\n \u2713 Installing CNI \ud83d\udd0c\n \u2713 Installing StorageClass \ud83d\udcbe\n \u2713 Joining worker nodes \ud83d\ude9c\nSet kubectl context to \"kind-lanchonete-k8s\"\nYou can now use your cluster with:\n\nkubectl cluster-info --context kind-lanchonete-k8s\n\nNot sure what to do next? \ud83d\ude05  Check out https://kind.sigs.k8s.io/docs/user/quick-start/\n</code></pre> <ul> <li>Ao final execute <code>kind get clusters</code> que dever\u00e1 exibir o resultado abaixo:</li> </ul> Bash<pre><code>lanchonete-k8s\n</code></pre> <ul> <li>Com <code>kubectl get nodes</code> voc\u00ea visualizar\u00e1 um node control plane e um worker:</li> </ul> Bash<pre><code>NAME                           STATUS   ROLES           AGE   VERSION\nlanchonete-k8s-control-plane   Ready    control-plane   32m   v1.31.0\nlanchonete-k8s-worker          Ready    &lt;none&gt;          32m   v1.31.0\n</code></pre> <ul> <li>Ap\u00f3s isso, execute <code>kubectl get pods -A</code> para listar todos os pods de todos os namespaces existentes no cluster.</li> </ul> Bash<pre><code>NAMESPACE            NAME                                                   READY   STATUS    RESTARTS   AGE\nkube-system          coredns-6f6b679f8f-sj9mn                               1/1     Running   0          83s\nkube-system          coredns-6f6b679f8f-vqssg                               1/1     Running   0          83s\nkube-system          etcd-lanchonete-k8s-control-plane                      1/1     Running   0          88s\nkube-system          kindnet-blq2k                                          1/1     Running   0          84s\nkube-system          kindnet-kk4lm                                          1/1     Running   0          80s\nkube-system          kube-apiserver-lanchonete-k8s-control-plane            1/1     Running   0          88s\nkube-system          kube-controller-manager-lanchonete-k8s-control-plane   1/1     Running   0          88s\nkube-system          kube-proxy-2frwg                                       1/1     Running   0          80s\nkube-system          kube-proxy-6bhr6                                       1/1     Running   0          84s\nkube-system          kube-scheduler-lanchonete-k8s-control-plane            1/1     Running   0          88s\nlocal-path-storage   local-path-provisioner-57c5987fd4-r4tw4                1/1     Running   0          83s\n</code></pre>"},{"location":"fase_2/kubernetes/#build-do-container-e-publicacao-no-cluster-kind","title":"Build do container e publica\u00e7\u00e3o no cluster Kind","text":"<p>Agora que o cluster est\u00e1 ativo \u00e9 necess\u00e1rio fazer o build da imagem container da aplica\u00e7\u00e3o. Use o script como no exemplo abaixo, informando a vers\u00e3o da imagem baseada em semantic version</p> Bash<pre><code>./infra/scripts/build-and-publish.sh v1.0.1\n</code></pre> <p>Processo do build iniciar\u00e1 e em seguida a publica\u00e7\u00e3o da imagem ser\u00e1 feita no Kind, com output semelhante ao exemplo:</p> Bash<pre><code>Building container image...\nImage version: v1.0.1\n[+] Building 42.0s (13/13) FINISHED                                                                                                                        docker:default\n =&gt; [internal] load build definition from Dockerfile                                                                                                                 0.2s\n =&gt; =&gt; transferring dockerfile: \n.\n.\n.\n =&gt; =&gt; naming to docker.io/library/web:v1.0.1    \nLoading image web:v1.0.1 into Kind, it may take a few minutes...\nImage: \"web:v1.0.1\" with ID \"sha256:0efb63782ce6fd65e45ee7dce3a5c8e1e336bfb66b0e99d30d28fa3e7cca3532\" not yet present on node \"lanchonete-k8s-worker\", loading...\nImage: \"web:v1.0.1\" with ID \"sha256:0efb63782ce6fd65e45ee7dce3a5c8e1e336bfb66b0e99d30d28fa3e7cca3532\" not yet present on node \"lanchonete-k8s-control-plane\", loading...\nBuild and publish of web:v1.0.1 completed!\n</code></pre>"},{"location":"fase_2/kubernetes/#deploy-do-servicos-no-cluster-kind","title":"Deploy do servi\u00e7os no cluster Kind","text":"<p>Utilizaremos o Kustomize para facilitar a reutiliza\u00e7\u00e3o e o gerenciamento dos manifestos K8S em mais de um ambiente, aqui h\u00e1 a segmenta\u00e7\u00e3o entre namespaces nomeados como <code>development</code> e <code>production</code>.</p> <p>Para fazer o deploy use o script informando os parametros de ambiente (<code>development</code> ou <code>production</code>) e a vers\u00e3o da imagem constru\u00edda no passo anterior.</p> Bash<pre><code>./infra/scripts/deploy.sh development v1.0.1\n</code></pre> Bash<pre><code>Updating Kustomize with the image version v1.0.1...\nNAME          STATUS   AGE\ndevelopment   Active   24m\nApplying Kubernetes manifests for development environment...\nsecret/db-url-secret created\nservice/db created\nservice/web created\npersistentvolumeclaim/db-pvc created\npersistentvolumeclaim/logs-pvc created\ndeployment.apps/db created\ndeployment.apps/web created\nDeployment complete!\n</code></pre> <p>Verifique o status dos pods informando o namespaces do ambiente (<code>development</code> ou <code>production</code>).</p> Bash<pre><code>kubectl get pod -n development\nNAME                   READY   STATUS    RESTARTS   AGE\ndb-5946df88b9-gn7n5    1/1     Running   0          64s\nweb-68f45d8994-xwlhz   1/1     Running   0          64s\n</code></pre> <p>Para confirmar que a vers\u00e3o do pod foi atualizada corretamente execute <code>kubectl get pod -n development &lt;nome-pod&gt; -o yaml</code> ou <code>kubectl get pod -n development &lt;nome-pod&gt; -o jsonpath=\"{..image}\"</code></p> Bash<pre><code>Output\nkubectl get pod -n development web-68f45d8994-xwlhz -o jsonpath=\"{..image}\"\nweb:v1.0.1 docker.io/library/web:v1.0.1%\n</code></pre> <p>Usando o service do Kubernetes fa\u00e7a port-foward para a porta 2000 e acesse normalmente http://localhost:2000/redoc para visualizar a documenta\u00e7\u00e3o ou o http://localhost:2000/docs#/ para acesso ao Swagger.</p> Bash<pre><code>kubectl get service -n development\nNAME         TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE\ndb           ClusterIP      10.96.146.204   &lt;none&gt;        5432/TCP         30s\nweb          LoadBalancer   10.96.103.219   &lt;pending&gt;     2000:31941/TCP   30s\n</code></pre> Bash<pre><code>kubectl -n development port-forward svc/web 2000\nForwarding from 127.0.0.1:2000 -&gt; 2000\nForwarding from [::1]:2000 -&gt; 2000\n</code></pre>"},{"location":"fase_2/kubernetes/#fastapi-screen-localhost","title":"FastAPI screen (localhost)","text":""},{"location":"fase_2/kubernetes/#horizontal-auto-scaling","title":"Horizontal Auto Scaling","text":"<p>Horizontal Pod Autoscaler (HPA) \u00e9 um recurso do Kubernetes que ajusta automaticamente o n\u00famero de pods do deployment com base em m\u00e9tricas, neste caso, adicionamos no HPA do pod da API parametrizado a utiliza\u00e7\u00e3o de CPU e de mem\u00f3ria. Isso ajuda a garantir que a aplica\u00e7\u00e3o possa escalar horizontalmente para atender \u00e0 demanda nos casos onde o limite do targed \u00e9 alcan\u00e7ado.</p> <p>Para configurar o HPA criamos o manifesto no diret\u00f3rio <code>./infra/k8s/base/hpa-we.yaml</code>:</p> YAML<pre><code>apiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: web-autoscaler\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: web\n  minReplicas: 1\n  maxReplicas: 4\n  metrics:\n    - type: Resource\n      resource:\n        name: cpu\n        target:\n          type: Utilization\n          averageUtilization: 70  # Scales based on CPU usage\n    - type: Resource\n      resource:\n        name: memory\n        target:\n          type: Utilization\n          averageUtilization: 70  # Scales based on memory usage\n</code></pre> Text Only<pre><code>Neste caso, o autoscaling dos pods ser\u00e1 ativado com base na utiliza\u00e7\u00e3o m\u00e9dia de CPU e mem\u00f3ria quando esse valor atingir 70%. A quantidade de r\u00e9plicas variar\u00e1 de um m\u00ednimo de 1 a um m\u00e1ximo de 4 pods. Como estamos usando o Kustomize para fazer os deploys da API e do banco de dados, o HPA ser\u00e1 criado automaticamente na pr\u00f3xima execu\u00e7\u00e3o do processo de deploy, conforme o exemplo abaixo:\n</code></pre> Bash<pre><code>\u276f ./infra/scripts/deploy.sh development v1.0.1\nUpdating Kustomize with the image version v1.0.1...\nError from server (NotFound): namespaces \"development\" not found\nnamespace/development created\nApplying Kubernetes manifests for development environment...\nservice/db created\nservice/web created\npersistentvolumeclaim/db-pvc created\npersistentvolumeclaim/logs-pvc created\ndeployment.apps/db created\ndeployment.apps/web created\nhorizontalpodautoscaler.autoscaling/web-autoscaler created\nDeployment complete!\n</code></pre> <p>Para verificar o status do HPA, use o comando abaixo para verificar o status do HPA e garantir que ele est\u00e1 funcionando corretamente:</p> Bash<pre><code>kubectl get hpa -n development\n</code></pre> <p>O output ser\u00e1 semelhante ao exemplo abaixo:</p> Bash<pre><code>NAME             REFERENCE        TARGETS                                     MINPODS   MAXPODS   REPLICAS   AGE\nweb-autoscaler   Deployment/web   cpu: 10%/70%, memory:22%/70%                1         4         1          53m\n</code></pre> <p>Assim, nossa API ajusta automaticamente o n\u00famero de r\u00e9plicas do deployment <code>web</code> com base na utiliza\u00e7\u00e3o de mem\u00f3ria e CPU, garantindo a escalabilidade horizontal conforme necess\u00e1rio.</p>"},{"location":"fase_2/novas_rotas/","title":"Novas Rotas","text":""},{"location":"fase_2/novas_rotas/#video-no-youtube","title":"V\u00eddeo no Youtube","text":""},{"location":"fase_2/novas_rotas/#video-no-youtube_1","title":"V\u00eddeo no Youtube","text":"<p>Link para Arquitetura do K8S no YouTube</p>"},{"location":"fase_2/novas_rotas/#checkout-pedido","title":"Checkout Pedido","text":"<p>Este endpoint \u00e9 utilizado para realizar o checkout de um pedido, recebendo os produtos solicitados e retornando a identifica\u00e7\u00e3o do pedido gerado.</p> <ul> <li>Descri\u00e7\u00e3o: Endpoint respons\u00e1vel por receber os produtos solicitados e retornar a identifica\u00e7\u00e3o do pedido gerado.</li> <li>M\u00e9todo: <code>POST</code></li> <li>Endpoint: <code>/orders/checkout</code></li> <li>Request Body: JSON<pre><code>{\n  \"status\": \"string\",\n  \"payment_status\": \"string\",\n  \"user_agent\": \"string\",\n  \"ip_address\": \"string\",\n  \"os\": \"string\",\n  \"browser\": \"string\",\n  \"device\": \"string\",\n  \"comments\": \"string\",\n  \"customer_id\": 0,\n  \"products\": [\n  {\n    \"product_id\": 0,\n    \"comment\": \"string\"\n  }\n  ]\n}\n</code></pre></li> <li>Response Body:</li> </ul> JSON<pre><code>{\n  \"id\": 0,\n  \"customer_id\": 0,\n  \"status\": \"string\",\n  \"created_at\": \"2024-10-03T14:25:43.242Z\",\n  \"payment_status\": \"string\"\n}\n</code></pre>"},{"location":"fase_2/novas_rotas/#consultar-status-de-pagamento","title":"Consultar Status de Pagamento","text":"<p>Este endpoint permite consultar o status de pagamento de um pedido espec\u00edfico para verificar se o pagamento foi aprovado ou n\u00e3o.</p> <ul> <li>Descri\u00e7\u00e3o: Consulta o status de pagamento de um pedido para verificar se o pagamento foi aprovado ou n\u00e3o.</li> <li>M\u00e9todo: <code>GET</code></li> <li>Endpoint: <code>/orders/{order_id}</code></li> <li>Par\u00e2metro: <code>order_id</code> (string): Identifica\u00e7\u00e3o \u00fanica do pedido.</li> <li>Exemplo de Request: <code>GET /orders/1</code></li> <li>Response Body:</li> </ul> JSON<pre><code>{\n  \"id\": 1,\n  \"customer_id\": 1,\n  \"status\": \"Finalizado\",\n  \"payment_status\": \"pago\",\n  \"order_products\": [\n  {\n    \"product_id\": 1,\n    \"comment\": \"Sem cebola\",\n    \"product\": {\n    \"name\": \"Sandu\u00edche de Frango Grelhado\",\n    \"description\": \"Grilled chicken sandwich with lettuce\",\n    \"price\": 15,\n    \"category\": {\n      \"name\": \"Sandu\u00edches\"\n    }\n    }\n  }\n  ]\n}\n</code></pre>"},{"location":"fase_2/novas_rotas/#confirmacao-de-pagamento","title":"Confirma\u00e7\u00e3o de Pagamento","text":"<p>Este endpoint recebe notifica\u00e7\u00f5es de pagamento aprovadas ou recusadas via webhook, sendo disparado automaticamente quando um pedido sofre altera\u00e7\u00e3o em seu status de pagamento.</p> <ul> <li>Descri\u00e7\u00e3o: Recebe notifica\u00e7\u00f5es de pagamento aprovadas ou recusadas via webhook. Ele \u00e9 disparado automaticamente uma vez que um pedido sofre altera\u00e7\u00e3o em seu status de pagamento.</li> <li>M\u00e9todo: <code>POST</code></li> <li>Endpoint: <code>/orders/webhook</code></li> <li>Request Body:</li> </ul> <p>JSON<pre><code>{\n  \"order_id\": 0,\n  \"customer_id\": 0,\n  \"received_at\": \"2024-10-03T14:40:48.732Z\"\n}\n</code></pre> - Response Body:</p> JSON<pre><code>{\n  \"order_id\": 0,\n  \"status\": \"string\",\n  \"customer_id\": 0,\n  \"payment_status\": \"string\",\n  \"received_at\": \"2024-10-03T14:40:48.733Z\"\n}\n</code></pre>"},{"location":"fase_2/novas_rotas/#listar-pedidos","title":"Listar pedidos","text":"<p>Este endpoint retorna a lista de pedidos com suas descri\u00e7\u00f5es, ordenados por regras espec\u00edficas, excluindo pedidos com status \"Finalizado\".</p> <ul> <li>Descri\u00e7\u00e3o: Retorna a lista de pedidos com suas descri\u00e7\u00f5es, ordenados por:</li> <li>Regra de ordena\u00e7\u00e3o: <code>Pronto</code> &gt; <code>Em Prepara\u00e7\u00e3o</code> &gt; <code>Recebido</code>;</li> <li>Pedidos mais antigos primeiro, baseado na o atributo <code>created_at</code>;</li> <li>Pedidos com status <code>Finalizado</code> n\u00e3o devem aparecer.</li> <li>M\u00e9todo: <code>GET</code></li> <li>Endpoint: <code>/orders</code></li> <li>Response Body:</li> </ul> JSON<pre><code>{\n  \"orders\": [\n  {\n    \"id\": 5,\n    \"customer_id\": 1,\n    \"status\": \"Recebido\",\n    \"created_at\": \"2024-09-12T19:06:46.240199\",\n    \"payment_status\": \"pago\"\n  },\n  {\n    \"id\": 6,\n    \"customer_id\": 1,\n    \"status\": \"Recebido\",\n    \"created_at\": \"2024-09-12T19:12:34.059608\",\n    \"payment_status\": \"pago\"\n  },\n  {\n    \"id\": 8,\n    \"customer_id\": 1,\n    \"status\": \"Recebido\",\n    \"created_at\": \"2024-09-12T19:20:01.736862\",\n    \"payment_status\": \"pago\"\n  }\n  ]\n}\n</code></pre>"},{"location":"fase_2/novas_rotas/#atualizar-status-do-pedido","title":"Atualizar Status do Pedido","text":"<p>Este endpoint permite a atualiza\u00e7\u00e3o do status de um pedido espec\u00edfico.</p> <ul> <li>Descri\u00e7\u00e3o: Permite a atualiza\u00e7\u00e3o do status de um pedido espec\u00edfico.</li> <li>M\u00e9todo: <code>PUT</code></li> <li>Endpoint: <code>/orders/{order_id}/status</code></li> <li>Par\u00e2metro: <code>order_id</code> (string): Identifica\u00e7\u00e3o \u00fanica do pedido.</li> <li>Request Body:</li> </ul> JSON<pre><code>{\n  \"status\": \"string\"\n}\n</code></pre> <ul> <li>Response Body:</li> </ul> JSON<pre><code>{\n  \"id\": 0,\n  \"customer_id\": 0,\n  \"status\": \"string\",\n  \"created_at\": \"2024-10-03T14:47:37.710Z\",\n  \"payment_status\": \"string\"\n}\n</code></pre>"},{"location":"fase_2/novas_rotas/#atualizar-status-de-pagamento","title":"Atualizar Status de Pagamento","text":"<p>Este endpoint permite a atualiza\u00e7\u00e3o do status de pagamento de um pedido.</p> <ul> <li>Descri\u00e7\u00e3o: Permite a atualiza\u00e7\u00e3o do status de pagamento de um pedido.</li> <li>M\u00e9todo: <code>PATCH</code></li> <li>Endpoint: <code>/orders/{order_id}/payment</code></li> <li>Par\u00e2metro: <code>order_id</code> (string): Identifica\u00e7\u00e3o \u00fanica do pedido.</li> <li>Request Body:</li> </ul> JSON<pre><code>{\n  \"payment_status\": \"string\"\n}\n</code></pre> <ul> <li>Response Body:</li> </ul> JSON<pre><code>{\n  \"id\": 0,\n  \"customer_id\": 0,\n  \"status\": \"string\",\n  \"created_at\": \"2024-10-03T14:50:06.223Z\",\n  \"payment_status\": \"string\"\n}\n</code></pre>"},{"location":"fase_2/steps/","title":"Passo a Passo para Testar o Backend","text":""},{"location":"fase_2/steps/#passos","title":"Passos","text":"<p>Essa documenta\u00e7\u00e3o fornece um passo a passo detalhado para realizar testes no backend do nosso projeto. Clique nas caixas abaixo para avan\u00e7ar em cada etapa do processo.</p>"},{"location":"fase_2/steps/#autenticacao-e-autorizacao","title":"Autentica\u00e7\u00e3o e autoriza\u00e7\u00e3o","text":"Gerar Token de Acesso e Autorizar <p>O primeiro passo \u00e9 criar um Token de Acesso usando um dos usu\u00e1rios administrativos. Para isso, utilize o Swagger em  Login for Access Token. Siga as etapas abaixo:</p> <ul> <li>Clique em Try it out.</li> <li>Preencha os seguintes campos: <ul> <li>username: \"email@email.com.br\"</li> <li>password: \"your_password\"</li> <li>client_id: \"1\"</li> </ul> </li> </ul> <p>Isso gerar\u00e1 o Token de Acesso necess\u00e1rio para prosseguir com as etapas que exigem autentica\u00e7\u00e3o via token. </p> <p>Ao tentar acessar endpoints que requerem autoriza\u00e7\u00e3o, como category, orders, e products, siga estas etapas adicionais:</p> <ul> <li>Clique em Authorize (s\u00edmbolo de cadeado).</li> <li>Fa\u00e7a login usando seu e-mail e senha administrativo.<ul> <li>username: \"email@email.com.br\"</li> <li>password: \"your_password\"</li> <li>client_id: 1</li> </ul> </li> </ul> Solu\u00e7\u00e3o de Problemas: 401 Unhauthorized <p>Se ao tentar acessar os endpoints category, orders, ou products voc\u00ea receber uma resposta com o erro 401 Unauthorized, isso significa que as credenciais n\u00e3o foram validadas corretamente.</p> <p>JSON<pre><code>Error: Unauthorized\n\nResponse body\nDownload\n{\n    \"detail\": \"Could not validate credentials\"\n}\n</code></pre> Verifique se o Token de Acesso foi gerado corretamente e se as credenciais est\u00e3o corretas ao tentar autorizar o acesso. </p> <p> </p> <p>Para garantir a seguran\u00e7a, o token expira a cada opera\u00e7\u00e3o (GET, PUT ou POST). Para ajustar o tempo de expira\u00e7\u00e3o do token, voc\u00ea deve definir a vari\u00e1vel de ambiente TIMETOKEN no arquivo .env com o valor desejado para o tempo de expira\u00e7\u00e3o personalizado.</p>"},{"location":"fase_2/steps/#onboarding-cliente-anonimo","title":"Onboarding: Cliente an\u00f4nimo","text":"Passo 01: Realizando pedido sem identifica\u00e7\u00e3o <p>Este projeto permite que o cliente fa\u00e7a um pedido sem a necessidade de cadastro de seus dados pessoais. Para executar esse fluxo, siga os passos abaixo: 1. Acesse o Swagger em Create Anonymous Customer. 2. Clique em Try it out. 3. Em seguida, clique em Execute. Ap\u00f3s seguir esses passos, um cliente an\u00f4nimo ser\u00e1 gerado, permitindo que o pedido seja realizado sem identifica\u00e7\u00e3o. </p>"},{"location":"fase_2/steps/#onboarding-cliente-identificado","title":"Onboarding: Cliente identificado","text":"Passo 02: Fazendo cadastro do cliente <p>Para os clientes que desejam se cadastrar na aplica\u00e7\u00e3o, basta usar o endpoint customers/register e preencher com os dados solicitados como no exemplo abaixo:</p> JSON<pre><code>{\n    \"name\": \"Abelardo\",\n    \"email\": \"abe@email.com.br\",\n    \"cpf\": \"001001001-11\",\n    \"password\": \"my_password\"\n}\n</code></pre> <p>Para certificar que o cliente foi registrado utilize o endpoint customers/read_customers e liste todos os clientes cadastrados.  </p>"},{"location":"fase_2/steps/#pedido-selecao-do-pedido","title":"Pedido: Sele\u00e7\u00e3o do pedido","text":"Passo 03: Efetuando um pedido <p>Com o endpoint orders/create_orders preencha com os valores de customer_id que foi cadastrado nos passos 01 ou 02 e product_id para adicionar o produto a um pedido, exemplo:</p> <p>JSON<pre><code>{\n    \"status\": \"string\",\n    \"user_agent\": \"string\",\n    \"ip_address\": \"string\",\n    \"os\": \"string\",\n    \"browser\": \"string\",\n    \"device\": \"string\",\n    \"comments\": \"string\",\n    \"customer_id\": 4,\n    \"products\": [\n        {\n        \"product_id\": 10,\n        \"comment\": \"sem gelo\"\n        }\n    ]\n}\n</code></pre> Resultado da opera\u00e7\u00e3o de sele\u00e7\u00e3o do pedido: </p>"},{"location":"fase_2/steps/#pagamento-processando-o-pagamento-do-pedido","title":"Pagamento: Processando o pagamento do pedido","text":"Passo 04: Realizando pagamento do pedido chamando a rota /payments <p>Com o endpoint orders/{order_id}/payment defina no par\u00e2metro \"order_id\" o id do pedido em quest\u00e3o para alterar seu status de pagamento, exemplo:</p> <p>JSON<pre><code>{\n  \"payment_status\": \"pago\"\n}\n</code></pre> Resultado da opera\u00e7\u00e3o de realiza\u00e7\u00e3o de chamada no endpoint de pagamento com um status code 200: JSON<pre><code>{\n  \"id\": 1,\n  \"customer_id\": 1,\n  \"status\": \"Recebido\",\n  \"created_at\": \"2024-10-15T12:40:45.696390\",\n  \"payment_status\": \"pago\"\n}\n</code></pre></p> <p>Obs.: Uma vez em que o status do pedido \u00e9 alterado, \u00e9 disparado um Webhook para a plataforma, com a data/hora do momento em que est\u00e1 sendo feita a altera\u00e7\u00e3o, o novo status do pagamento do pedido e o id do mesmo, conforme: JSON<pre><code>{\n  \"order_id\": 1,\n  \"status\": \"Finalizado\",\n  \"customer_id\": 1,\n  \"payment_status\": \"pago\",\n  \"received_at\": \"2024-10-15T22:21:35.479Z\"\n}\n</code></pre></p> Passo 04.1: Realizando pagamento do pedido com fake checkout <p>Ap\u00f3s executar o orders/fake_checkout siga para o fluxo de atualiza\u00e7\u00e3o de status do pedido.</p>"},{"location":"fase_2/steps/#preparacao-e-atualizacao-do-pedido","title":"Prepara\u00e7\u00e3o e atualiza\u00e7\u00e3o do pedido","text":"Passo 05: Atualiza\u00e7\u00e3o de status de pedido <p>Com order_id \u00e9 poss\u00edvel fazer a atualiza\u00e7\u00e3o de status de cada pedido, com o endpoint orders/update_order_status. Exemplo com valor de entrada usando o order_id 3:</p> JSON<pre><code>{\n    \"status\": \"em prepara\u00e7\u00e3o\"\n}\n</code></pre> Passo 06: Visualizando status do pedido <p>Para visualizar o status atual de um pedido, siga os passos abaixo: - Com o valor do order_id, acesse o endpoint orders/read_order. - Verifique o status atual do pedido. Exemplo de retorno:</p> <p>JSON<pre><code>{\n    \"id\": 3,\n    \"customer_id\": 4,\n    \"status\": \"em prepara\u00e7\u00e3o\"\n}\n</code></pre> - Para atualizar o status do pedido para pronto, utilize o endpoint oorders/update_order_status com o seguinte corpo de requisi\u00e7\u00e3o:</p> <p>JSON<pre><code>{\n    \"status\": \"pronto\"\n}\n</code></pre> - Depois de atualizar o status, voc\u00ea pode confirmar a atualiza\u00e7\u00e3o acessando novamente o endpoint orders/read_order. O estado do pedido ser\u00e1 exibido como pronto para retirada. </p> Listando todos os pedidos registrados <p>Em orders/read_orders \u00e9 poss\u00edvel listar todos os pedidos feitos por cliente. Exemplo com valores de retorno:</p> JSON<pre><code>{\n    \"orders\": [\n        {\n        \"id\": 1,\n        \"customer_id\": 1\n        },\n        {\n        \"id\": 2,\n        \"customer_id\": 4\n        },\n        {\n        \"id\": 3,\n        \"customer_id\": 4\n        },\n        {\n        \"id\": 4,\n        \"customer_id\": 4\n        }\n    ]\n}    \n</code></pre>"},{"location":"fase_2/steps/#gerenciamento-de-produtos-e-categorias","title":"Gerenciamento de produtos e categorias","text":"Cadastro de produto <p>Usando o endpoint products/create_product \u00e9 poss\u00edvel fazer o cadastro de um novo produto de acordo com as categorias previamente cadastradas. Exemplo com valores de entrada:</p> JSON<pre><code>{\n    \"name\": \"Brigadeiro\",\n    \"description\": \"Doce feito com leite condensado e achocolatado\",\n    \"price\": 3,\n    \"category_id\": 5,\n    \"category\": \"Sobremesas\"\n}\n</code></pre> Atualiza\u00e7\u00e3o de categoria <p>Para atualizar uma categoria de produto, utilize o endpoint category/update_category: - Com o valor do category_id, fa\u00e7a a requisi\u00e7\u00e3o com o corpo de requisi\u00e7\u00e3o similar ao exemplo abaixo:</p> JSON<pre><code>{\n\"name\": \"Sobremesas\",\n\"description\": \"Categoria dedicada a todos os tipos de sobremesas.\"\n}    \n</code></pre> Listando categorias e produtos <p>Usando o endpoint category/list_categories \u00e9 poss\u00edvel fazer o cadastro de um novo produto de acordo com as categorias previamente cadastradas. Exemplo com valores que retornam nessa opera\u00e7\u00e3o:</p> JSON<pre><code>{\n\"categories\": [\n    {\n    \"name\": \"Sandu\u00edches\",\n    \"id\": 1,\n    \"products\": [\n        {\n        \"name\": \"Sandu\u00edche de Frango Grelhado\",\n        \"description\": \"Grilled chicken sandwich with lettuce and tomato\",\n        \"price\": 15,\n        \"category_id\": 1,\n        \"category\": \"Sandu\u00edches\",\n        \"id\": 1\n        },\n        {\n        \"name\": \"Cheeseburger Cl\u00e1ssico\",\n        \"description\": \"Classic cheeseburger with beef patty and cheese\",\n        \"price\": 12,\n        \"category_id\": 1,\n        \"category\": \"Sandu\u00edches\",\n        \"id\": 2\n        },\n        {\n        \"name\": \"Sandu\u00edche Vegano de Gr\u00e3o-de-Bico\",\n        \"description\": \"Vegan sandwich with chickpea patty\",\n        \"price\": 14,\n        \"category_id\": 1,\n        \"category\": \"Sandu\u00edches\",\n        \"id\": 3\n        }\n    ]\n    },\n    {\n    \"name\": \"Pizzas\",\n    \"id\": 2,\n    \"products\": [\n        {\n        \"name\": \"Pizza Margherita\",\n        \"description\": \"Pizza with tomato sauce, mozzarella, and basil\",\n        \"price\": 25,\n        \"category_id\": 2,\n        \"category\": \"Pizzas\",\n        \"id\": 4\n        },\n        {\n        \"name\": \"Pizza Pepperoni\",\n        \"description\": \"Pizza with tomato sauce, mozzarella, and pepperoni\",\n        \"price\": 27,\n        \"category_id\": 2,\n        \"category\": \"Pizzas\",\n        \"id\": 5\n        },\n        {\n        \"name\": \"Pizza Quatro Queijos\",\n        \"description\": \"Pizza with four types of cheese\",\n        \"price\": 28,\n        \"category_id\": 2,\n        \"category\": \"Pizzas\",\n        \"id\": 6\n        }\n    ]\n    },\n    {\n    \"name\": \"Acompanhamentos\",\n    \"id\": 3,\n    \"products\": [\n        {\n        \"name\": \"Batata Frita\",\n        \"description\": \"Portion of crispy french fries\",\n        \"price\": 8,\n        \"category_id\": 3,\n        \"category\": \"Acompanhamentos\",\n        \"id\": 7\n        },\n        {\n        \"name\": \"An\u00e9is de Cebola\",\n        \"description\": \"Portion of breaded onion rings\",\n        \"price\": 9,\n        \"category_id\": 3,\n        \"category\": \"Acompanhamentos\",\n        \"id\": 8\n        },\n        {\n        \"name\": \"Salada Caesar\",\n        \"description\": \"Caesar salad with lettuce, croutons, and parmesan cheese\",\n        \"price\": 10,\n        \"category_id\": 3,\n        \"category\": \"Acompanhamentos\",\n        \"id\": 9\n        }\n    ]\n    },\n    {\n    \"name\": \"Bebidas\",\n    \"id\": 4,\n    \"products\": [\n        {\n        \"name\": \"Coca-Cola\",\n        \"description\": \"Cola soft drink\",\n        \"price\": 5,\n        \"category_id\": 4,\n        \"category\": \"Bebidas\",\n        \"id\": 10\n        },\n        {\n        \"name\": \"Suco de Laranja\",\n        \"description\": \"Natural orange juice\",\n        \"price\": 6,\n        \"category_id\": 4,\n        \"category\": \"Bebidas\",\n        \"id\": 11\n        },\n        {\n        \"name\": \"\u00c1gua Mineral\",\n        \"description\": \"Still mineral water\",\n        \"price\": 4,\n        \"category_id\": 4,\n        \"category\": \"Bebidas\",\n        \"id\": 12\n        }\n    ]\n    },\n    {\n    \"name\": \"Sobremesas\",\n    \"id\": 5,\n    \"products\": [\n        {\n        \"name\": \"Brownie de Chocolate\",\n        \"description\": \"Chocolate brownie with walnuts\",\n        \"price\": 7,\n        \"category_id\": 5,\n        \"category\": \"Sobremesas\",\n        \"id\": 13\n        },\n        {\n        \"name\": \"Torta de Ma\u00e7\u00e3\",\n        \"description\": \"Apple pie with cinnamon\",\n        \"price\": 8,\n        \"category_id\": 5,\n        \"category\": \"Sobremesas\",\n        \"id\": 14\n        },\n        {\n        \"name\": \"Sorvete de Baunilha\",\n        \"description\": \"Vanilla ice cream\",\n        \"price\": 6,\n        \"category_id\": 5,\n        \"category\": \"Sobremesas\",\n        \"id\": 15\n        },\n        {\n        \"name\": \"Brigadeiro\",\n        \"description\": \"Doce feito com leite condensado e achocolatado\",\n        \"price\": 3,\n        \"category_id\": 5,\n        \"category\": \"Sobremesas\",\n        \"id\": 16\n        },\n        {\n        \"name\": \"Brigadeiro\",\n        \"description\": \"Doce feito com leite condensado e achocolatado\",\n        \"price\": 3,\n        \"category_id\": 5,\n        \"category\": \"Sobremesas\",\n        \"id\": 17\n        },\n        {\n        \"name\": \"Brigadeiro\",\n        \"description\": \"Doce feito com leite condensado e achocolatado\",\n        \"price\": 3,\n        \"category_id\": 5,\n        \"category\": \"Sobremesas\",\n        \"id\": 18\n        },\n        {\n        \"name\": \"Brigadeiro\",\n        \"description\": \"Doce feito com leite condensado e achocolatado\",\n        \"price\": 3,\n        \"category_id\": 5,\n        \"category\": \"Sobremesas\",\n        \"id\": 19\n        }\n    ]\n    }\n]\n}\n</code></pre>"},{"location":"fase_3/cicd_code_app/","title":"CICD using GitHub Actions Workflow to deploy code in EKS cluster","text":"<p>Este projeto utiliza o GitHub Actions para automatizar as etapas de versionamento, build e publica\u00e7\u00e3o de imagens de cont\u00eainer no Amazon ECR, al\u00e9m do deploy em um cluster EKS. O fluxo foi projetado para garantir simplicidade e continuidade nos processos, com gatilhos configurados para pipelines espec\u00edficos de acordo com o ambiente. Deploy em Ambiente N\u00e3o-Produtivo</p> <p>No ambiente n\u00e3o-produtivo, o versionamento das imagens segue o padr\u00e3o do commit SHA do GitHub, acompanhado do sufixo -dev. Esse pipeline \u00e9 ativado por meio de um coment\u00e1rio /deploy em um Pull Request. O deploy \u00e9 realizado no cluster EKS no namespace development. Deploy em Ambiente Produtivo</p> <p>Para o ambiente de produ\u00e7\u00e3o, adota-se o versionamento sem\u00e2ntico para as imagens, com um controle rigoroso da nomenclatura de branches, conforme descrito abaixo:</p> Text Only<pre><code>Patch Version (Corre\u00e7\u00e3o de bugs): Prefixo `bugfix/`.\nMinor Version (Novas funcionalidades sem mudan\u00e7as incompat\u00edveis): Prefixo feature/.\nMajor Version (Mudan\u00e7as incompat\u00edveis ou significativas): Prefixo release/.\nDocumenta\u00e7\u00e3o ou Ajustes Diversos: Prefixos doc/ ou misc/ \u2014 usados apenas para incrementar a vers\u00e3o de build (ex.: v0.0.0+1).\n</code></pre> <p>Benef\u00edcios do Workflow</p> Text Only<pre><code>Automa\u00e7\u00e3o completa: Reduz a interven\u00e7\u00e3o manual e agiliza os processos de build e deploy.\nControle de qualidade: Facilita a separa\u00e7\u00e3o clara entre ambientes de desenvolvimento e produ\u00e7\u00e3o.\nRastreabilidade: Garante que cada vers\u00e3o seja facilmente identific\u00e1vel por meio de padr\u00f5es definidos de nomenclatura e versionamento.\n</code></pre>"},{"location":"fase_3/cicd_code_app/#workflow-de-deploy-para-o-ambiente-de-desenvolvimento","title":"Workflow de Deploy para o Ambiente de Desenvolvimento","text":"<p>Este workflow do GitHub Actions automatiza o processo de deploy para o ambiente de desenvolvimento ao detectar um coment\u00e1rio espec\u00edfico (/deploy) em uma issue. Essa funcionalidade atende aos requisitos de integra\u00e7\u00e3o e entrega de c\u00f3digo no workload, promovendo a ado\u00e7\u00e3o de pr\u00e1ticas de integra\u00e7\u00e3o e deploy cont\u00ednuos.</p>"},{"location":"fase_3/cicd_code_app/#fluxograma-do-workflow-nao-produtivo","title":"Fluxograma do Workflow N\u00e3o-Produtivo","text":"<pre><code>\nflowchart TD\n  A[[Issue Comment Triggered]]\n    style A fill:#f9f,stroke:#333,stroke-width:2\n  B[[Start Job: build-deploy-dev]]\n    style B fill:#ff9,stroke:#333,stroke-width:2\n  C[[Checkout Code]]\n  D[[Configure AWS Credentials]]\n  E[[Login to Amazon ECR]]\n  F[[Build Container Image]]\n  G[[Setup Kubeconfig for EKS]]\n  H[[Deploy EKS: Development]]\n\n  A --&gt;|Trigger: /deploy| B\n  B --&gt; C\n  C --&gt; D\n  D --&gt; E\n  E --&gt; F\n  F --&gt; G\n  G --&gt; H\n</code></pre>"},{"location":"fase_3/cicd_code_app/#detalhes","title":"Detalhes","text":"Text Only<pre><code>Etapas:\n- Condi\u00e7\u00e3o: Executa apenas se o corpo do coment\u00e1rio contiver /deploy.\n- Checkout do c\u00f3digo: Faz o checkout do reposit\u00f3rio usando actions/checkout@v2.\n- Configura\u00e7\u00e3o das credenciais AWS: Configura as credenciais da AWS utilizando aws-actions/configure-aws-credentials@v1.\n- Login no registro ECR: Realiza o login no ECR usando aws-actions/amazon-ecr-login@v1.\n- Build e push da imagem de cont\u00eainer:\n    Constr\u00f3i a imagem Docker e a envia para o reposit\u00f3rio ECR.\n    Utiliza o SHA do commit com o sufixo -dev como vers\u00e3o da imagem.\n    Define a vers\u00e3o da imagem no ambiente do GitHub.\n- Configura\u00e7\u00e3o do Kubeconfig: Configura o kubectl para usar o cluster EKS especificado.\n- Deploy no namespace development do cluster EKS:\n    Utiliza o kustomize para ajustar a vers\u00e3o da imagem.\n    Verifica se o namespace development existe, criando-o se necess\u00e1rio.\n    Aplica os manifests Kubernetes com kubectl apply -k.\n</code></pre> <p>Observa\u00e7\u00f5es:</p> Text Only<pre><code>O workflow utiliza o kustomize para personaliza\u00e7\u00e3o dos recursos Kubernetes.\nO processo de deploy inclui tratamento de erros para relatar detalhes dos pods em caso de falha.\n</code></pre>"},{"location":"fase_3/cicd_code_app/#workflow-de-deploy-para-o-ambiente-de-producao","title":"Workflow de Deploy para o Ambiente de Produ\u00e7\u00e3o","text":"<p>Este workflow automatiza o processo de versionamento, build, publica\u00e7\u00e3o de imagem Docker no Amazon ECR e deploy no ambiente de produ\u00e7\u00e3o no cluster Kubernetes gerenciado pelo EKS. Ele \u00e9 acionado automaticamente ao realizar um push na branch main.</p>"},{"location":"fase_3/cicd_code_app/#fluxograma-do-workflow-de-producao","title":"Fluxograma do Workflow de Produ\u00e7\u00e3o","text":"<pre><code>flowchart TD\n    A[Push na branch main] --&gt;|Trigger| B[Job: Version]\n    B --&gt;|Calcula nova vers\u00e3o sem\u00e2ntica| C[Cria tag Git]\n    C --&gt; D[Job: Build]\n    D --&gt;|Faz login no ECR e publica imagem| E[Publica imagem com nova vers\u00e3o]\n    E --&gt; F[Job: Deploy]\n    F --&gt;|Configura o Kubeconfig| G[Verifica namespace e ajusta manifests]\n    G --&gt;|Aplica recursos no Kubernetes| H[Deploy conclu\u00eddo]\n    H --&gt;|Erro?| I{Erro no Deploy?}\n    I --&gt;|Sim| J[Exibe logs de pods e detalhes]\n    I --&gt;|N\u00e3o| K[Deploy bem-sucedido]</code></pre>"},{"location":"fase_3/cicd_code_app/#detalhes_1","title":"Detalhes","text":"<ol> <li>Gerenciamento de Vers\u00e3o</li> </ol> <p>Este job calcula e cria uma nova vers\u00e3o sem\u00e2ntica baseada no hist\u00f3rico de commits. Este job \u00e9 executado apenas quando h\u00e1 um push para a branch main e n\u00e3o \u00e9 acionado pelo bot do GitHub Actions. A sa\u00edda deste job \u00e9 uma nova vers\u00e3o sem\u00e2ntica, armazenada na vari\u00e1vel <code>semver_tag</code>.</p> Text Only<pre><code>Etapas:\n- Checkout do reposit\u00f3rio: Garante acesso ao hist\u00f3rico completo dos commits.\n- Listagem de tags Git: Identifica a vers\u00e3o mais recente.\n- C\u00e1lculo de nova vers\u00e3o: Utiliza o branching model trunk-based para determinar a pr\u00f3xima vers\u00e3o.\n- Cria\u00e7\u00e3o de tag Git: Cria e associa a nova tag ao commit atual.\n</code></pre> <ol> <li>Build e Push da Imagem Docker</li> </ol> <p>Este job constr\u00f3i a imagem Docker da aplica\u00e7\u00e3o e publica no Amazon ECR.</p> Text Only<pre><code>Etapas:\n- Checkout do reposit\u00f3rio.\n- Configura\u00e7\u00e3o de credenciais AWS: Configura acesso seguro para interagir com o ECR.\n- Login no registro ECR: Autentica no ECR privado.\n- Build e push da imagem Docker:\n    Utiliza a nova vers\u00e3o sem\u00e2ntica como tag da imagem.\n    Faz o push da imagem para o ECR.\n</code></pre> <ol> <li>Deploy no Kubernetes</li> </ol> <p>Este job realiza o deploy da aplica\u00e7\u00e3o no ambiente de produ\u00e7\u00e3o, utilizando o namespace production.</p> Text Only<pre><code>Etapas:\n\n- Checkout do reposit\u00f3rio.\n- Configura\u00e7\u00e3o de credenciais AWS.\n- Setup do Kubeconfig: Configura o acesso ao cluster EKS.\n- Deploy com kustomize:\n    Verifica se o namespace production existe, criando-o caso necess\u00e1rio.\n    Ajusta a vers\u00e3o da imagem no diret\u00f3rio infra/kubernetes/production.\n    Aplica os manifests no cluster Kubernetes.\n    Em caso de erro, exibe detalhes dos pods para facilitar a depura\u00e7\u00e3o.\n</code></pre> <p>Observa\u00e7\u00f5es</p> Text Only<pre><code>Controle de vers\u00e3o: Utiliza o SemVer para versionamento consistente.\nPersonaliza\u00e7\u00e3o Kubernetes: O deploy utiliza o kustomize para gerenciar configura\u00e7\u00f5es espec\u00edficas do ambiente.\nTratamento de erros: Logs detalhados s\u00e3o exibidos em caso de falha no deploy, facilitando a an\u00e1lise.\n</code></pre>"},{"location":"fase_3/eks_infra_cicd/","title":"Infra-Kitchen","text":"<p>Nesta etapa apresentamos os processos e pr\u00e1ticas adotados para o gerenciamento da infraestrutura utilizada no Tech Challenge 3.  Contendo os detalhes para configurar, provisionar e gerenciar o Kubernetes no EKS, bem como as boas pr\u00e1ticas para garantir um processo seguro e eficiente.  O reposit\u00f3rio que cont\u00e9m os manifestor do Terraform o infra-kitchen.</p>"},{"location":"fase_3/eks_infra_cicd/#requisitos-e-configuracao-do-ambiente","title":"Requisitos e configura\u00e7\u00e3o do ambiente","text":"<p>A infraestrutura utiliza uma conta AWS Academy, que possui limita\u00e7\u00f5es de recursos e sess\u00f5es com dura\u00e7\u00e3o de 4 horas.  \u00c9 essencial seguir rigorosamente os passos abaixo para evitar atrasos ou inconsist\u00eancias no provisionamento:</p> <ol> <li> <p>Configura\u00e7\u00e3o de credenciais:</p> <ul> <li>Inicie o laborat\u00f3rio na AWS Academy.</li> <li>Acesse o bot\u00e3o AWS Details e, em seguida, clique em AWS CLI para visualizar as credenciais tempor\u00e1rias.</li> <li>Copie e cole o conte\u00fado exibido diretamente no arquivo <code>~/.aws/credentials</code> no terminal.</li> </ul> </li> <li> <p>Configura\u00e7\u00e3o no HCP:</p> <ul> <li>Atualize os valores das credenciais AWS nas configura\u00e7\u00f5es do HCP: <code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_ACCESS_KEY</code> e <code>AWS_SESSION_TOKEN</code>.</li> <li>Navegue para <code>Settings &gt; Variable Set</code> nos workspaces HCP infra-kitchen e insira as vari\u00e1veis mencionadas.</li> </ul> </li> <li> <p>Ferramentas necess\u00e1rias:</p> <ul> <li>Certifique-se de ter o Terraform instalado localmente.</li> <li>Utilize as vers\u00f5es recomendadas no guia do Tech Challenge.</li> </ul> </li> </ol>"},{"location":"fase_3/eks_infra_cicd/#validacao-local","title":"Valida\u00e7\u00e3o local","text":"<p>Para garantir a integridade do c\u00f3digo e identificar problemas antes de um deploy, utilize os comandos a seguir:</p> <ul> <li><code>terraform init</code>: Inicializa o diret\u00f3rio local e prepara os plugins necess\u00e1rios.</li> <li><code>terraform fmt</code>: Corrige a formata\u00e7\u00e3o dos arquivos <code>.tf</code>.</li> <li><code>terraform validate</code>: Verifica se as configura\u00e7\u00f5es s\u00e3o v\u00e1lidas e consistentes.</li> <li><code>terraform plan</code>: Gera um plano de execu\u00e7\u00e3o para prever altera\u00e7\u00f5es na infraestrutura.</li> </ul>"},{"location":"fase_3/eks_infra_cicd/#integracao-com-o-hcp","title":"Integra\u00e7\u00e3o com o HCP","text":""},{"location":"fase_3/eks_infra_cicd/#visao-geral","title":"Vis\u00e3o geral","text":"<p>Utilizamos o HCP Terraform para centralizar e padronizar o gerenciamento da infraestrutura.  Este ambiente permite:</p> <ul> <li>Execu\u00e7\u00f5es consistentes do Terraform.</li> <li>Colabora\u00e7\u00e3o simplificada, com hist\u00f3rico compartilhado de altera\u00e7\u00f5es.</li> <li>Controle de acesso individualizado para membros da equipe.</li> </ul>"},{"location":"fase_3/eks_infra_cicd/#fluxo-de-trabalho","title":"Fluxo de trabalho","text":""},{"location":"fase_3/eks_infra_cicd/#fluxo-automatico","title":"Fluxo autom\u00e1tico","text":"<ol> <li> <p>Execu\u00e7\u00e3o autom\u00e1tica do <code>terraform plan</code>:</p> <ul> <li>A cada push, um plano de execu\u00e7\u00e3o \u00e9 gerado para prever mudan\u00e7as.</li> <li>Ap\u00f3s o merge de um PR, um novo <code>terraform plan</code> e um <code>terraform apply</code> s\u00e3o executados automaticamente.</li> </ul> </li> <li> <p>Monitoramento no HCP:</p> <ul> <li>Acompanhe os logs detalhados e status de execu\u00e7\u00e3o atrav\u00e9s dos runs do HCP.</li> </ul> </li> </ol>"},{"location":"fase_3/eks_infra_cicd/#material-hand-wrench-etapas-manuais","title":":material-hand-wrench: Etapas manuais","text":"<p>Em casos de erro, interven\u00e7\u00f5es manuais podem ser necess\u00e1rias. Certifique-se de registrar qualquer ajuste manual no log ou em uma issue do reposit\u00f3rio desse projeto.</p>"},{"location":"fase_3/eks_infra_cicd/#tutorial-provisionando-a-infra-no-eks","title":"Tutorial: Provisionando a infra no EKS","text":"<ol> <li> <p>Criar e executar merge de um pull request:</p> <ul> <li>Atualize os valores no HCP e no ambiente local.</li> <li>Submeta um PR no reposit\u00f3rio e realize o merge na branch principal. </li> <li>A execu\u00e7\u00e3o autom\u00e1tica do <code>terraform plan</code> e <code>terraform apply</code> ser\u00e1 iniciada.</li> </ul> </li> <li> <p>Obter o Kubeconfig:</p> <ul> <li>Ap\u00f3s a infraestrutura estar ativa, utilize os comandos abaixo para configurar o acesso ao cluster Kubernetes:</li> </ul> </li> </ol> Bash<pre><code>    aws eks --region us-east-1 update-kubeconfig --name EKS-lanchonete-cluster\n\n    kubectl cluster-info\n    \u276f kubectl cluster-info\n    Kubernetes control plane is running at https://8A378062CC9AEEE22CD23D0F97BDBAF3.gr7.us-east-1.eks.amazonaws.com\n    CoreDNS is running at https://8A378062CC9AEEE22CD23D0F97BDBAF3.gr7.us-east-1.eks.amazonaws.com/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n\n    To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.\n</code></pre> <ol> <li>Deploy de manifestos no Kubernetes:<ul> <li>Navegue at\u00e9 o reposit\u00f3rio do app service.</li> <li>Configure o diret\u00f3rio de manifests com o comando:</li> <li>Bash<pre><code>      KUSTOMIZE_DIR=\"$(pwd)/infra/kubernetes/development\"\n      kubectl apply -k $KUSTOMIZE_DIR -n development\n      kubectl get pod -n development\n</code></pre></li> </ul> </li> </ol>"},{"location":"fase_3/eks_infra_cicd/#fluxos-de-destroy","title":"Fluxos de destroy","text":"<p>Para evitar exclus\u00f5es acidentais, os processos de destrui\u00e7\u00e3o s\u00e3o restritos \u00e0s configura\u00e7\u00f5es do HCP. Siga os passos abaixo:</p> <ol> <li>Acesse o workspace:</li> <li>Entre no HCP infra-kitchen workspace.</li> <li>Acione o destroy:</li> <li>Navegue para a aba Settings e selecione Destruction and Deletion.</li> <li>Programe ou inicie manualmente a destrui\u00e7\u00e3o da infraestrutura.</li> </ol>"},{"location":"fase_3/eks_infra_cicd/#regras-do-repositorio","title":"Regras do reposit\u00f3rio","text":"<ul> <li>Boas pr\u00e1ticas de versionamento:</li> <li>Utilize mensagens de commit claras e padronizadas.</li> <li>Realize revis\u00f5es de PR com foco em consist\u00eancia e seguran\u00e7a.</li> </ul>"},{"location":"fase_3/eks_infra_cicd/#integracao-continua","title":"Integra\u00e7\u00e3o cont\u00ednua","text":""},{"location":"fase_3/eks_infra_cicd/#verificacoes-automaticas-com-tflint","title":"Verifica\u00e7\u00f5es autom\u00e1ticas com TFLint","text":"<p>O reposit\u00f3rio que provisiona a infra no EKS reposit\u00f3rio possui verifica\u00e7\u00f5es autom\u00e1ticas via GitHub Actions para garantir a qualidade do c\u00f3digo IaC.  A cada commit, as seguintes a\u00e7\u00f5es s\u00e3o executadas:</p> <ul> <li>Formata\u00e7\u00e3o do C\u00f3digo: verifica\u00e7\u00e3o de padr\u00f5es estabelecidos para arquivos Terraform.</li> <li>Valida\u00e7\u00e3o Sint\u00e1tica: garantia de que as configura\u00e7\u00f5es n\u00e3o contenham erros estruturais.</li> </ul> <p>Certifique-se de revisar os relat\u00f3rios gerados no plan/apply e tente corrigir quaisquer problemas antes de enviar novas altera\u00e7\u00f5es.</p>"},{"location":"fase_3/sls_setup/","title":"Serverless","text":""},{"location":"fase_3/sls_setup/#subindo-a-aplicacao-com-serverless-framework","title":"Subindo a Aplica\u00e7\u00e3o com Serverless Framework","text":"<p>Este tutorial explica como fazer o deploy de uma aplica\u00e7\u00e3o com Serverless Framework j\u00e1 criada. Vamos configurar o ambiente, personalizar o arquivo <code>serverless.yml</code> e usar os comandos necess\u00e1rios para subir a aplica\u00e7\u00e3o para a AWS.</p>"},{"location":"fase_3/sls_setup/#pre-requisitos","title":"Pr\u00e9-requisitos","text":"<p>Antes de come\u00e7ar, voc\u00ea precisa ter os seguintes pr\u00e9-requisitos configurados:</p> <ul> <li> <p>AWS CLI configurada com credenciais (acesso \u00e0 AWS):   Bash<pre><code>aws configure\n</code></pre>   Forne\u00e7a sua AWS Access Key, Secret Key, regi\u00e3o (ex.: <code>us-east-1</code>) e formato de sa\u00edda (ex.: <code>json</code>).</p> </li> <li> <p>Node.js e Serverless Framework instalados globalmente:   Bash<pre><code>npm install -g serverless\n</code></pre></p> </li> </ul>"},{"location":"fase_3/sls_setup/#passos-para-subir-a-aplicacao-com-serverless","title":"Passos para Subir a Aplica\u00e7\u00e3o com Serverless","text":"<ol> <li>Acessando o diret\u00f3rio da aplica\u00e7\u00e3o</li> </ol> <p>Entre no diret\u00f3rio onde a aplica\u00e7\u00e3o j\u00e1 foi criada com o Serverless Framework.</p> Bash<pre><code>cd /.../auth-coffee\n</code></pre> <ol> <li>Configurando o arquivo <code>serverless.yml</code></li> </ol> <p>O arquivo <code>serverless.yml</code> \u00e9 o arquivo principal de configura\u00e7\u00e3o onde voc\u00ea define as fun\u00e7\u00f5es Lambda, os recursos da AWS e eventos que disparam as fun\u00e7\u00f5es.</p> YAML<pre><code>service: tech-challenge\n\nframeworkVersion: '3'\n\nprovider:\n  name: aws\n  region: sa-east-1\n  ecr:\n    images:\n      tech-challenge:\n        path: .\n .\n .\n .\n\nfunctions:\n  api:\n    image:\n      name: tech-challenge\n    events:\n      - httpApi:\n          path: /{proxy+} #Rota gen\u00e9rica, pois far\u00e1 o redirecionamento para o Framework FastAPI via Magnum\n          method: ANY\n\nplugins:\n- serverless-dotenv-plugin\n</code></pre> <p>Explica\u00e7\u00e3o:    - service: Nome do servi\u00e7o ou aplica\u00e7\u00e3o.    - provider: Defini\u00e7\u00f5es do provedor de nuvem (AWS, no caso).    - functions: Define as fun\u00e7\u00f5es Lambda que ser\u00e3o implementadas.    - events: O evento que aciona a fun\u00e7\u00e3o Lambda, no caso, uma requisi\u00e7\u00e3o HTTP do API Gateway.    - plugins: Caso voc\u00ea tenha depend\u00eancias espec\u00edficas, como em projetos Python.</p> <ol> <li>Verificando o <code>handler</code></li> </ol> <p>O handler \u00e9 o arquivo onde a fun\u00e7\u00e3o Lambda \u00e9 implementada.</p> Python<pre><code>handler = Mangum(\n  app,\n  lifespan=\"off\",\n  api_gateway_base_path=''\n  )\n</code></pre> <ol> <li>Instalar depend\u00eancias (se houver)</li> </ol> <p>Caso voc\u00ea tenha depend\u00eancias para o seu projeto (ex.: com <code>pip</code> no Python ou <code>npm</code> no Node.js), instale-as:</p> <ul> <li> <p>Execute o arquivo <code>requirements.txt</code> com pip e instale as dependencias do projeto localmente:      Bash<pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Deploy da aplica\u00e7\u00e3o</p> </li> </ul> <p>Agora, com tudo configurado, basta rodar o comando para fazer o deploy da sua aplica\u00e7\u00e3o para a AWS:</p> Bash<pre><code>sls deploy\n</code></pre> <p>Esse comando cria e configura os recursos necess\u00e1rios no AWS, como a fun\u00e7\u00e3o Lambda, API Gateway, e outros servi\u00e7os que voc\u00ea definiu.</p> <p>Sa\u00edda esperada:</p> <p>Ap\u00f3s o deploy ser conclu\u00eddo, voc\u00ea ver\u00e1 um resultado semelhante a este:</p> Text Only<pre><code>Deploying tech-challenge to stage dev (sa-east-1)\n\n\u2714 Service deployed to stack tech-challenge-dev (646s)\n\nendpoint: ANY - https://xxxxx.execute-api.sa-east-1.amazonaws.com/{proxy+}                                                                                                                                                     \nfunctions:\n  api: tech-challenge-dev-api                                                                                                                                                                                                       \n\nMonitor all your API routes with Serverless Console: run \"serverless --console\" \n</code></pre> <p>O link da API gerado ser\u00e1 exibido na sa\u00edda, e voc\u00ea poder\u00e1 acessar o endpoint da sua fun\u00e7\u00e3o Lambda atrav\u00e9s do navegador ou ferramentas como Postman.</p>"},{"location":"fase_3/sls_setup/#comandos-importantes-do-serverless-framework","title":"Comandos Importantes do Serverless Framework","text":"<ul> <li> <p>Deploy da aplica\u00e7\u00e3o: Bash<pre><code>sls deploy\n</code></pre></p> </li> <li> <p>Visualizar as fun\u00e7\u00f5es implantadas e recursos: Bash<pre><code>sls info\n</code></pre></p> </li> <li> <p>Remover a aplica\u00e7\u00e3o da AWS (excluir todos os recursos): Bash<pre><code>sls remove\n</code></pre></p> </li> <li> <p>Ver logs das fun\u00e7\u00f5es Lambda: Bash<pre><code>sls logs -f hello\n</code></pre></p> </li> <li> <p>Invocar a fun\u00e7\u00e3o Lambda diretamente: Bash<pre><code>sls invoke -f hello\n</code></pre></p> </li> <li> <p>Testar localmente (para fun\u00e7\u00f5es HTTP, por exemplo): Bash<pre><code>sls offline start\n</code></pre></p> </li> </ul>"},{"location":"fase_4/continuous_integration/","title":"Continuous integration and continuous delivery","text":"<p>Nesta quarta entrega, apresentamos os processos para a implementa\u00e7\u00e3o do Tech Challenge, cujo objetivo \u00e9 desenvolver uma plataforma de vendas para uma lanchonete de bairro em plena expans\u00e3o. Este documento detalha os testes unit\u00e1rios, cobertura de c\u00f3digo e o fluxo de deploy baseado na branch principal.</p> <p>A implementa\u00e7\u00e3o foi realizada utilizando o mesmo ambiente configurado na fase 3, garantindo consist\u00eancia e continuidade.</p> <p>Para mais detalhes, consulte os manifestos do Terraform dispon\u00edveis no reposit\u00f3rio infra-kitchen.</p>"},{"location":"fase_4/continuous_integration/#checks-de-pr","title":"Checks de PR","text":"<p>Cada reposit\u00f3rio de servi\u00e7o possui um pipeline automatizado para verificar a qualidade do c\u00f3digo e a execu\u00e7\u00e3o de testes unit\u00e1rios sempre que h\u00e1 mudan\u00e7as no c\u00f3digo.</p> <ul> <li>An\u00e1lise de c\u00f3digo com Flake8: Valida a conformidade do c\u00f3digo com as melhores pr\u00e1ticas do Python.</li> <li>Execu\u00e7\u00e3o de testes unit\u00e1rios:</li> <li>Configura\u00e7\u00e3o do ambiente com Python 3.10 e Poetry.</li> <li>Instala\u00e7\u00e3o de depend\u00eancias via Poetry.</li> </ul>"},{"location":"fase_4/continuous_integration/#execucao-de-testes-com-pytest-e-cobertura-de-codigo","title":"Execu\u00e7\u00e3o de testes com pytest e cobertura de c\u00f3digo.","text":""},{"location":"fase_4/continuous_integration/#cobertura-de-codigo","title":"Cobertura de c\u00f3digo","text":"<p>O pipeline de cobertura de c\u00f3digo \u00e9 acionado via push na branch principal e em pull requests, garantindo que a cobertura m\u00ednima seja respeitada. Execu\u00e7\u00e3o dos testes com cobertura inclui:</p> <ul> <li>O pytest \u00e9 executado com pytest-cov.</li> <li>O relat\u00f3rio de cobertura \u00e9 gerado no formato XML.</li> </ul> <p>Caso a cobertura fique abaixo de 75%, o pipeline falha, upload do relat\u00f3rio de cobertura como artefato no GitHub Actions.</p> <p></p>"},{"location":"fase_4/continuous_integration/#pipeline-de-deploy","title":"Pipeline de Deploy","text":"<p>O deploy \u00e9 acionado via coment\u00e1rio no PR (/deploy). O GitHub Actions executa as seguintes etapas:</p> <ul> <li>Build da imagem Docker com a tag baseada no commit SHA.</li> <li>Push da imagem para o Amazon ECR.</li> <li>Atualiza\u00e7\u00e3o do Kustomize para utilizar a nova imagem.</li> <li>Aplicar as configura\u00e7\u00f5es no cluster Kubernetes.</li> </ul> <p>No ambiente de desenvolvimento o eploy acionado com <code>/deploy</code> em um PR.</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>Mais detalhe da execu\u00e7\u00e3o do pipeline clique aqui</p> <p>No Ambiente de Produ\u00e7\u00e3o o versionamento \u00e9 baseado em semver e nas seguintes regras de nome de branch:</p> <ul> <li>bugfix/ \u2192 Patch version</li> <li>feature/ \u2192 Minor version</li> <li>release/ \u2192 Major version</li> <li>doc/ ou misc/ \u2192 Apenas incrementa\u00e7\u00e3o de build</li> </ul>"},{"location":"fase_4/movies/","title":"V\u00eddeos","text":""},{"location":"fase_4/movies/#videos-no-youtube","title":"V\u00eddeos no Youtube","text":""},{"location":"fase_4/ms_architecture/","title":"Arquitetura de microsservi\u00e7os","text":"<p>Nesta documenta\u00e7\u00e3o, detalharemos tr\u00eas microsservi\u00e7os principais da nossa plataforma:</p> <ol> <li>Auth Service: Respons\u00e1vel pela autentica\u00e7\u00e3o de usu\u00e1rios e gera\u00e7\u00e3o de tokens JWT.</li> <li>Order Service: Cuida do gerenciamento de pedidos e sua intera\u00e7\u00e3o com o Payment Service.</li> <li>Payment Service: Gerencia a integra\u00e7\u00e3o de pagamentos atrav\u00e9s do MercadoPago.</li> </ol> <p>Cada servi\u00e7o \u00e9 desenvolvido utilizando tecnologias espec\u00edficas e possui funcionalidades e endpoints pr\u00f3prios, garantindo uma arquitetura modular e escal\u00e1vel.</p>"},{"location":"fase_4/ms_architecture/#desenho-da-arquitetura-atualizada-com-os-microsservicos","title":"Desenho da arquitetura atualizada com os microsservi\u00e7os","text":""},{"location":"fase_4/ms_architecture/#auth-service","title":"Auth service","text":"<p>Esse microsservi\u00e7o \u00e9 respons\u00e1vel pela etapa de autentica\u00e7\u00e3o de clientes identificados, n\u00e3o identificados e usu\u00e1rios administrativos. Al\u00e9m disso, esse servi\u00e7o tamb\u00e9m faz a gera\u00e7\u00e3o de tokens JWT para autentica\u00e7\u00e3o em outro servi\u00e7os. Contendo os endpoints para o gerenciamento de usu\u00e1rios.</p>"},{"location":"fase_4/ms_architecture/#funcionalidades","title":"Funcionalidades","text":"<ul> <li>Autentica\u00e7\u00e3o de usu\u00e1rios: Gera\u00e7\u00e3o de tokens JWT para autentica\u00e7\u00e3o.</li> <li>Cadastro de usu\u00e1rios: Permite que novos usu\u00e1rios se cadastrem no sistema.</li> <li>Valida\u00e7\u00e3o de tokens: Valida se os tokens enviados em requisi\u00e7\u00f5es s\u00e3o v\u00e1lidos.</li> <li>Integra\u00e7\u00e3o com outros servi\u00e7os: O Auth Service \u00e9 consumido por outros servi\u00e7os para validar a autenticidade de requisi\u00e7\u00f5es.</li> </ul>"},{"location":"fase_4/ms_architecture/#endpoints","title":"Endpoints","text":"<ul> <li>POST /token: Solicita um bearer token.</li> <li>GET /auth: Valida a autoriza\u00e7\u00e3o do bearer token.</li> <li>POST /customers/admin: Cria o usu\u00e1rio administrador da aplica\u00e7\u00e3o</li> <li>GET /customer/: Recupera a lista de usu\u00e1rios cadastrados.</li> <li>POST /customer/identify: Identifica um usu\u00e1rio pelo CPF.</li> <li>POST /customer/register: Criar o usu\u00e1rio identificado.</li> <li>POST /customer/anonymous: Criar o usu\u00e1rio an\u00f4nimo.</li> </ul>"},{"location":"fase_4/ms_architecture/#payment-service","title":"Payment service","text":"<p>Esse microsservi\u00e7o \u00e9 parte essencial da plataforma de vendas da lanchonete, gerenciando a integra\u00e7\u00e3o de pagamentos atrav\u00e9s do MercadoPago. Ele \u00e9 respons\u00e1vel por gerar QR codes para pagamentos e registrar todo o fluxo de transa\u00e7\u00f5es, garantindo a seguran\u00e7a e a integridade dos dados armazenados.</p>"},{"location":"fase_4/ms_architecture/#detalhes-do-funcionamento","title":"Detalhes do funcionamento","text":"<p>Utilizamos o FastAPI como framework para desenvolvimento de APIs. O MongoDB \u00e9 o banco de dados NoSQL utilizado para armazenar dados de transa\u00e7\u00f5es, e a intera\u00e7\u00e3o com o MongoDB \u00e9 feita atrav\u00e9s do driver pymongo. Para a integra\u00e7\u00e3o com o sistema de pagamentos MercadoPago, utilizamos o MercadoPago SDK. Al\u00e9m disso, o Poetry \u00e9 utilizado como gerenciador de depend\u00eancias e ambiente virtual.</p>"},{"location":"fase_4/ms_architecture/#order-service","title":"Order service","text":"<p>O Order service gerencia os pedidos da lanchonete, atualizando os status dos pedidos e interagindo com o payment service para a realiza\u00e7\u00e3o de pagamentos.</p>"},{"location":"fase_4/ms_architecture/#funcionalidades_1","title":"Funcionalidades","text":"<ul> <li>Cria\u00e7\u00e3o de pedidos: Permite a cria\u00e7\u00e3o de novos pedidos a partir de um cliente autenticado.</li> <li>Atualiza\u00e7\u00e3o de status: Permite que o status do pedido seja atualizado, como paid, preparing, delivered, etc.</li> <li>Integra\u00e7\u00e3o com servi\u00e7o de pagamento: Comunica-se com um servi\u00e7o de pagamento para gerar links de pagamento ou QR codes.</li> <li>Gerenciamento de produtos e categorias: A\u00e7\u00f5es CRUD (Create, Read, Update, Delete) para produtos e categorias.</li> <li>Rastreamento de pedidos: Permite o rastreamento do status de cada pedido.</li> </ul>"}]}