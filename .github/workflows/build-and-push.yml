name: build-and-push
on:
  issue_comment:
    types: [created, edited, deleted]
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: app/web
  EKS_CLUSTER_NAME: EKS-lanchonete-cluster

permissions:
  contents: read

jobs:
  build-and-push:
    if: github.event_name == 'issue_comment' || (github.event_name == 'push' && github.ref == 'refs/heads/main') 
    runs-on: ubuntu-latest

    outputs:
      image: ${{ steps.build.outputs.image }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for deploy-dev comment
        if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '/deploy-dev')
        run: echo "Deploying to development environment..."

      - name: Versioning image
        id: image-tag
        run: |
          if [[ "${{ github.event_name }}" == 'push' && "${{ github.ref }}" == "refs/heads/main" ]]; then
           # Versioning the production image, incrementing the semantic version!
            VERSION=$(cat VERSION)
            NEW_VERSION=$(echo $VERSION | awk -F. '{print $1"."$2"."$3+1}')
            echo $NEW_VERSION > VERSION
            echo "tag=${{ github.sha }}" >> $GITHUB_ENV
          else
            echo "tag=${{ github.sha }}-dev" >> $GITHUB_ENV
            # Versioning the development image, using the commit SHA!
            echo "tag=${{ github.sha }}-dev" >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR registry
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: private
          mask-password: true

      - name: Build and push the container image
        id: build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          GITHUB_OUTPUT: $GITHUB_ENV
        #   IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.tag }} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.tag }}

      - name: Commit and push updated version
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add VERSION
          git commit -m "ci: bump version to ${{ env.tag }}"
          git push origin main

      - name: Setup Kubeconfig
        run: aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME

      - name: Deploy app in Kubernetes cluster
        if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '/deploy-dev')
        env:
          IMAGE: ${{ steps.build.outputs.image }}
          GITHUB_OUTPUT: $GITHUB_ENV
        run: |
          source $GITHUB_ENV

          ENVIRONMENT=development
          KUSTOMIZE_DIR=$(pwd)/infra/kubernetes/development

          if [[ "${{ github.event_name }}" == 'push' && "${{ github.ref }}" == "refs/heads/main" ]]; then
          ENVIRONMENT=production
          KUSTOMIZE_DIR=$(pwd)/infra/kubernetes/production
          fi

          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          echo "KUSTOMIZE_DIR=$KUSTOMIZE_DIR" >> $GITHUB_ENV

          cd $KUSTOMIZE_DIR
          pwd && ls -la

          # Check if namespace exists, if not create it
          kubectl get namespace $ENVIRONMENT || kubectl create namespace $ENVIRONMENT

          kustomize edit set image web=${{ env.tag }}

          echo "Deploying resources in $ENVIRONMENT environment"
          echo "Using image version: ${{ env.tag }}"
          kubectl apply -k $KUSTOMIZE_DIR -n $ENVIRONMENT && echo "Resources deployed successfully!" || (echo "Failed to deploy resources!" && exit 1)
